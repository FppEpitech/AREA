
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Token
 * 
 */
export type Token = $Result.DefaultSelection<Prisma.$TokenPayload>
/**
 * Model Plum
 * 
 */
export type Plum = $Result.DefaultSelection<Prisma.$PlumPayload>
/**
 * Model ActionTemplate
 * 
 */
export type ActionTemplate = $Result.DefaultSelection<Prisma.$ActionTemplatePayload>
/**
 * Model Action
 * 
 */
export type Action = $Result.DefaultSelection<Prisma.$ActionPayload>
/**
 * Model TriggerTemplate
 * 
 */
export type TriggerTemplate = $Result.DefaultSelection<Prisma.$TriggerTemplatePayload>
/**
 * Model Trigger
 * 
 */
export type Trigger = $Result.DefaultSelection<Prisma.$TriggerPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.token`: Exposes CRUD operations for the **Token** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.token.findMany()
    * ```
    */
  get token(): Prisma.TokenDelegate<ExtArgs>;

  /**
   * `prisma.plum`: Exposes CRUD operations for the **Plum** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plums
    * const plums = await prisma.plum.findMany()
    * ```
    */
  get plum(): Prisma.PlumDelegate<ExtArgs>;

  /**
   * `prisma.actionTemplate`: Exposes CRUD operations for the **ActionTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActionTemplates
    * const actionTemplates = await prisma.actionTemplate.findMany()
    * ```
    */
  get actionTemplate(): Prisma.ActionTemplateDelegate<ExtArgs>;

  /**
   * `prisma.action`: Exposes CRUD operations for the **Action** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Actions
    * const actions = await prisma.action.findMany()
    * ```
    */
  get action(): Prisma.ActionDelegate<ExtArgs>;

  /**
   * `prisma.triggerTemplate`: Exposes CRUD operations for the **TriggerTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TriggerTemplates
    * const triggerTemplates = await prisma.triggerTemplate.findMany()
    * ```
    */
  get triggerTemplate(): Prisma.TriggerTemplateDelegate<ExtArgs>;

  /**
   * `prisma.trigger`: Exposes CRUD operations for the **Trigger** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Triggers
    * const triggers = await prisma.trigger.findMany()
    * ```
    */
  get trigger(): Prisma.TriggerDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.0.1
   * Query Engine version: 5dbef10bdbfb579e07d35cc85fb1518d357cb99e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Token: 'Token',
    Plum: 'Plum',
    ActionTemplate: 'ActionTemplate',
    Action: 'Action',
    TriggerTemplate: 'TriggerTemplate',
    Trigger: 'Trigger'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "token" | "plum" | "actionTemplate" | "action" | "triggerTemplate" | "trigger"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Token: {
        payload: Prisma.$TokenPayload<ExtArgs>
        fields: Prisma.TokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findFirst: {
            args: Prisma.TokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findMany: {
            args: Prisma.TokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          create: {
            args: Prisma.TokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          createMany: {
            args: Prisma.TokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          delete: {
            args: Prisma.TokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          update: {
            args: Prisma.TokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          deleteMany: {
            args: Prisma.TokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          aggregate: {
            args: Prisma.TokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateToken>
          }
          groupBy: {
            args: Prisma.TokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<TokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.TokenCountArgs<ExtArgs>
            result: $Utils.Optional<TokenCountAggregateOutputType> | number
          }
        }
      }
      Plum: {
        payload: Prisma.$PlumPayload<ExtArgs>
        fields: Prisma.PlumFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlumFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlumPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlumFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlumPayload>
          }
          findFirst: {
            args: Prisma.PlumFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlumPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlumFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlumPayload>
          }
          findMany: {
            args: Prisma.PlumFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlumPayload>[]
          }
          create: {
            args: Prisma.PlumCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlumPayload>
          }
          createMany: {
            args: Prisma.PlumCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlumCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlumPayload>[]
          }
          delete: {
            args: Prisma.PlumDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlumPayload>
          }
          update: {
            args: Prisma.PlumUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlumPayload>
          }
          deleteMany: {
            args: Prisma.PlumDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlumUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlumUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlumPayload>
          }
          aggregate: {
            args: Prisma.PlumAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlum>
          }
          groupBy: {
            args: Prisma.PlumGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlumGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlumCountArgs<ExtArgs>
            result: $Utils.Optional<PlumCountAggregateOutputType> | number
          }
        }
      }
      ActionTemplate: {
        payload: Prisma.$ActionTemplatePayload<ExtArgs>
        fields: Prisma.ActionTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActionTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActionTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionTemplatePayload>
          }
          findFirst: {
            args: Prisma.ActionTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActionTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionTemplatePayload>
          }
          findMany: {
            args: Prisma.ActionTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionTemplatePayload>[]
          }
          create: {
            args: Prisma.ActionTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionTemplatePayload>
          }
          createMany: {
            args: Prisma.ActionTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActionTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionTemplatePayload>[]
          }
          delete: {
            args: Prisma.ActionTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionTemplatePayload>
          }
          update: {
            args: Prisma.ActionTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionTemplatePayload>
          }
          deleteMany: {
            args: Prisma.ActionTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActionTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ActionTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionTemplatePayload>
          }
          aggregate: {
            args: Prisma.ActionTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActionTemplate>
          }
          groupBy: {
            args: Prisma.ActionTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActionTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActionTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<ActionTemplateCountAggregateOutputType> | number
          }
        }
      }
      Action: {
        payload: Prisma.$ActionPayload<ExtArgs>
        fields: Prisma.ActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPayload>
          }
          findFirst: {
            args: Prisma.ActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPayload>
          }
          findMany: {
            args: Prisma.ActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPayload>[]
          }
          create: {
            args: Prisma.ActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPayload>
          }
          createMany: {
            args: Prisma.ActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPayload>[]
          }
          delete: {
            args: Prisma.ActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPayload>
          }
          update: {
            args: Prisma.ActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPayload>
          }
          deleteMany: {
            args: Prisma.ActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionPayload>
          }
          aggregate: {
            args: Prisma.ActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAction>
          }
          groupBy: {
            args: Prisma.ActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActionCountArgs<ExtArgs>
            result: $Utils.Optional<ActionCountAggregateOutputType> | number
          }
        }
      }
      TriggerTemplate: {
        payload: Prisma.$TriggerTemplatePayload<ExtArgs>
        fields: Prisma.TriggerTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TriggerTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TriggerTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerTemplatePayload>
          }
          findFirst: {
            args: Prisma.TriggerTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TriggerTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerTemplatePayload>
          }
          findMany: {
            args: Prisma.TriggerTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerTemplatePayload>[]
          }
          create: {
            args: Prisma.TriggerTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerTemplatePayload>
          }
          createMany: {
            args: Prisma.TriggerTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TriggerTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerTemplatePayload>[]
          }
          delete: {
            args: Prisma.TriggerTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerTemplatePayload>
          }
          update: {
            args: Prisma.TriggerTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerTemplatePayload>
          }
          deleteMany: {
            args: Prisma.TriggerTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TriggerTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TriggerTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerTemplatePayload>
          }
          aggregate: {
            args: Prisma.TriggerTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTriggerTemplate>
          }
          groupBy: {
            args: Prisma.TriggerTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<TriggerTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.TriggerTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<TriggerTemplateCountAggregateOutputType> | number
          }
        }
      }
      Trigger: {
        payload: Prisma.$TriggerPayload<ExtArgs>
        fields: Prisma.TriggerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TriggerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TriggerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload>
          }
          findFirst: {
            args: Prisma.TriggerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TriggerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload>
          }
          findMany: {
            args: Prisma.TriggerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload>[]
          }
          create: {
            args: Prisma.TriggerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload>
          }
          createMany: {
            args: Prisma.TriggerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TriggerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload>[]
          }
          delete: {
            args: Prisma.TriggerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload>
          }
          update: {
            args: Prisma.TriggerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload>
          }
          deleteMany: {
            args: Prisma.TriggerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TriggerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TriggerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriggerPayload>
          }
          aggregate: {
            args: Prisma.TriggerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrigger>
          }
          groupBy: {
            args: Prisma.TriggerGroupByArgs<ExtArgs>
            result: $Utils.Optional<TriggerGroupByOutputType>[]
          }
          count: {
            args: Prisma.TriggerCountArgs<ExtArgs>
            result: $Utils.Optional<TriggerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    tokens: number
    plums: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tokens?: boolean | UserCountOutputTypeCountTokensArgs
    plums?: boolean | UserCountOutputTypeCountPlumsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlumWhereInput
  }


  /**
   * Count Type ActionTemplateCountOutputType
   */

  export type ActionTemplateCountOutputType = {
    actions: number
  }

  export type ActionTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actions?: boolean | ActionTemplateCountOutputTypeCountActionsArgs
  }

  // Custom InputTypes
  /**
   * ActionTemplateCountOutputType without action
   */
  export type ActionTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionTemplateCountOutputType
     */
    select?: ActionTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ActionTemplateCountOutputType without action
   */
  export type ActionTemplateCountOutputTypeCountActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionWhereInput
  }


  /**
   * Count Type ActionCountOutputType
   */

  export type ActionCountOutputType = {
    plums: number
  }

  export type ActionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plums?: boolean | ActionCountOutputTypeCountPlumsArgs
  }

  // Custom InputTypes
  /**
   * ActionCountOutputType without action
   */
  export type ActionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionCountOutputType
     */
    select?: ActionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ActionCountOutputType without action
   */
  export type ActionCountOutputTypeCountPlumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlumWhereInput
  }


  /**
   * Count Type TriggerTemplateCountOutputType
   */

  export type TriggerTemplateCountOutputType = {
    triggers: number
  }

  export type TriggerTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    triggers?: boolean | TriggerTemplateCountOutputTypeCountTriggersArgs
  }

  // Custom InputTypes
  /**
   * TriggerTemplateCountOutputType without action
   */
  export type TriggerTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriggerTemplateCountOutputType
     */
    select?: TriggerTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TriggerTemplateCountOutputType without action
   */
  export type TriggerTemplateCountOutputTypeCountTriggersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TriggerWhereInput
  }


  /**
   * Count Type TriggerCountOutputType
   */

  export type TriggerCountOutputType = {
    plums: number
  }

  export type TriggerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plums?: boolean | TriggerCountOutputTypeCountPlumsArgs
  }

  // Custom InputTypes
  /**
   * TriggerCountOutputType without action
   */
  export type TriggerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriggerCountOutputType
     */
    select?: TriggerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TriggerCountOutputType without action
   */
  export type TriggerCountOutputTypeCountPlumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlumWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    userId: number | null
  }

  export type UserSumAggregateOutputType = {
    userId: number | null
  }

  export type UserMinAggregateOutputType = {
    userId: number | null
    username: string | null
    hashedPassword: string | null
    mail: string | null
  }

  export type UserMaxAggregateOutputType = {
    userId: number | null
    username: string | null
    hashedPassword: string | null
    mail: string | null
  }

  export type UserCountAggregateOutputType = {
    userId: number
    username: number
    hashedPassword: number
    mail: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    userId?: true
  }

  export type UserSumAggregateInputType = {
    userId?: true
  }

  export type UserMinAggregateInputType = {
    userId?: true
    username?: true
    hashedPassword?: true
    mail?: true
  }

  export type UserMaxAggregateInputType = {
    userId?: true
    username?: true
    hashedPassword?: true
    mail?: true
  }

  export type UserCountAggregateInputType = {
    userId?: true
    username?: true
    hashedPassword?: true
    mail?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    userId: number
    username: string
    hashedPassword: string
    mail: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    username?: boolean
    hashedPassword?: boolean
    mail?: boolean
    tokens?: boolean | User$tokensArgs<ExtArgs>
    plums?: boolean | User$plumsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    username?: boolean
    hashedPassword?: boolean
    mail?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    userId?: boolean
    username?: boolean
    hashedPassword?: boolean
    mail?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tokens?: boolean | User$tokensArgs<ExtArgs>
    plums?: boolean | User$plumsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      tokens: Prisma.$TokenPayload<ExtArgs>[]
      plums: Prisma.$PlumPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      username: string
      hashedPassword: string
      mail: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userWithUserIdOnly = await prisma.user.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `userId`
     * const userWithUserIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tokens<T extends User$tokensArgs<ExtArgs> = {}>(args?: Subset<T, User$tokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findMany"> | Null>
    plums<T extends User$plumsArgs<ExtArgs> = {}>(args?: Subset<T, User$plumsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlumPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly userId: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly hashedPassword: FieldRef<"User", 'String'>
    readonly mail: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.tokens
   */
  export type User$tokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    where?: TokenWhereInput
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    cursor?: TokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * User.plums
   */
  export type User$plumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plum
     */
    select?: PlumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlumInclude<ExtArgs> | null
    where?: PlumWhereInput
    orderBy?: PlumOrderByWithRelationInput | PlumOrderByWithRelationInput[]
    cursor?: PlumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlumScalarFieldEnum | PlumScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Token
   */

  export type AggregateToken = {
    _count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  export type TokenAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    scope: number | null
  }

  export type TokenSumAggregateOutputType = {
    id: number | null
    userId: number | null
    scope: number | null
  }

  export type TokenMinAggregateOutputType = {
    id: number | null
    userId: number | null
    provider: string | null
    tokenHashed: string | null
    scope: number | null
    creationDate: string | null
  }

  export type TokenMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    provider: string | null
    tokenHashed: string | null
    scope: number | null
    creationDate: string | null
  }

  export type TokenCountAggregateOutputType = {
    id: number
    userId: number
    provider: number
    tokenHashed: number
    scope: number
    creationDate: number
    _all: number
  }


  export type TokenAvgAggregateInputType = {
    id?: true
    userId?: true
    scope?: true
  }

  export type TokenSumAggregateInputType = {
    id?: true
    userId?: true
    scope?: true
  }

  export type TokenMinAggregateInputType = {
    id?: true
    userId?: true
    provider?: true
    tokenHashed?: true
    scope?: true
    creationDate?: true
  }

  export type TokenMaxAggregateInputType = {
    id?: true
    userId?: true
    provider?: true
    tokenHashed?: true
    scope?: true
    creationDate?: true
  }

  export type TokenCountAggregateInputType = {
    id?: true
    userId?: true
    provider?: true
    tokenHashed?: true
    scope?: true
    creationDate?: true
    _all?: true
  }

  export type TokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Token to aggregate.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tokens
    **/
    _count?: true | TokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokenMaxAggregateInputType
  }

  export type GetTokenAggregateType<T extends TokenAggregateArgs> = {
        [P in keyof T & keyof AggregateToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToken[P]>
      : GetScalarType<T[P], AggregateToken[P]>
  }




  export type TokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenWhereInput
    orderBy?: TokenOrderByWithAggregationInput | TokenOrderByWithAggregationInput[]
    by: TokenScalarFieldEnum[] | TokenScalarFieldEnum
    having?: TokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokenCountAggregateInputType | true
    _avg?: TokenAvgAggregateInputType
    _sum?: TokenSumAggregateInputType
    _min?: TokenMinAggregateInputType
    _max?: TokenMaxAggregateInputType
  }

  export type TokenGroupByOutputType = {
    id: number
    userId: number
    provider: string
    tokenHashed: string
    scope: number
    creationDate: string
    _count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  type GetTokenGroupByPayload<T extends TokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokenGroupByOutputType[P]>
            : GetScalarType<T[P], TokenGroupByOutputType[P]>
        }
      >
    >


  export type TokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    provider?: boolean
    tokenHashed?: boolean
    scope?: boolean
    creationDate?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["token"]>

  export type TokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    provider?: boolean
    tokenHashed?: boolean
    scope?: boolean
    creationDate?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["token"]>

  export type TokenSelectScalar = {
    id?: boolean
    userId?: boolean
    provider?: boolean
    tokenHashed?: boolean
    scope?: boolean
    creationDate?: boolean
  }

  export type TokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Token"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      provider: string
      tokenHashed: string
      scope: number
      creationDate: string
    }, ExtArgs["result"]["token"]>
    composites: {}
  }

  type TokenGetPayload<S extends boolean | null | undefined | TokenDefaultArgs> = $Result.GetResult<Prisma.$TokenPayload, S>

  type TokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TokenCountAggregateInputType | true
    }

  export interface TokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Token'], meta: { name: 'Token' } }
    /**
     * Find zero or one Token that matches the filter.
     * @param {TokenFindUniqueArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TokenFindUniqueArgs>(args: SelectSubset<T, TokenFindUniqueArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Token that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TokenFindUniqueOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TokenFindUniqueOrThrowArgs>(args: SelectSubset<T, TokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Token that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TokenFindFirstArgs>(args?: SelectSubset<T, TokenFindFirstArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Token that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TokenFindFirstOrThrowArgs>(args?: SelectSubset<T, TokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.token.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.token.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokenWithIdOnly = await prisma.token.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TokenFindManyArgs>(args?: SelectSubset<T, TokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Token.
     * @param {TokenCreateArgs} args - Arguments to create a Token.
     * @example
     * // Create one Token
     * const Token = await prisma.token.create({
     *   data: {
     *     // ... data to create a Token
     *   }
     * })
     * 
     */
    create<T extends TokenCreateArgs>(args: SelectSubset<T, TokenCreateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tokens.
     * @param {TokenCreateManyArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const token = await prisma.token.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TokenCreateManyArgs>(args?: SelectSubset<T, TokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tokens and returns the data saved in the database.
     * @param {TokenCreateManyAndReturnArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const token = await prisma.token.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tokens and only return the `id`
     * const tokenWithIdOnly = await prisma.token.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TokenCreateManyAndReturnArgs>(args?: SelectSubset<T, TokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Token.
     * @param {TokenDeleteArgs} args - Arguments to delete one Token.
     * @example
     * // Delete one Token
     * const Token = await prisma.token.delete({
     *   where: {
     *     // ... filter to delete one Token
     *   }
     * })
     * 
     */
    delete<T extends TokenDeleteArgs>(args: SelectSubset<T, TokenDeleteArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Token.
     * @param {TokenUpdateArgs} args - Arguments to update one Token.
     * @example
     * // Update one Token
     * const token = await prisma.token.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TokenUpdateArgs>(args: SelectSubset<T, TokenUpdateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tokens.
     * @param {TokenDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.token.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TokenDeleteManyArgs>(args?: SelectSubset<T, TokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TokenUpdateManyArgs>(args: SelectSubset<T, TokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Token.
     * @param {TokenUpsertArgs} args - Arguments to update or create a Token.
     * @example
     * // Update or create a Token
     * const token = await prisma.token.upsert({
     *   create: {
     *     // ... data to create a Token
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Token we want to update
     *   }
     * })
     */
    upsert<T extends TokenUpsertArgs>(args: SelectSubset<T, TokenUpsertArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.token.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends TokenCountArgs>(
      args?: Subset<T, TokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokenAggregateArgs>(args: Subset<T, TokenAggregateArgs>): Prisma.PrismaPromise<GetTokenAggregateType<T>>

    /**
     * Group by Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokenGroupByArgs['orderBy'] }
        : { orderBy?: TokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Token model
   */
  readonly fields: TokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Token.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Token model
   */ 
  interface TokenFieldRefs {
    readonly id: FieldRef<"Token", 'Int'>
    readonly userId: FieldRef<"Token", 'Int'>
    readonly provider: FieldRef<"Token", 'String'>
    readonly tokenHashed: FieldRef<"Token", 'String'>
    readonly scope: FieldRef<"Token", 'Int'>
    readonly creationDate: FieldRef<"Token", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Token findUnique
   */
  export type TokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findUniqueOrThrow
   */
  export type TokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findFirst
   */
  export type TokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findFirstOrThrow
   */
  export type TokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findMany
   */
  export type TokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token create
   */
  export type TokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The data needed to create a Token.
     */
    data: XOR<TokenCreateInput, TokenUncheckedCreateInput>
  }

  /**
   * Token createMany
   */
  export type TokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tokens.
     */
    data: TokenCreateManyInput | TokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Token createManyAndReturn
   */
  export type TokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tokens.
     */
    data: TokenCreateManyInput | TokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Token update
   */
  export type TokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The data needed to update a Token.
     */
    data: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
    /**
     * Choose, which Token to update.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token updateMany
   */
  export type TokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokenWhereInput
  }

  /**
   * Token upsert
   */
  export type TokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The filter to search for the Token to update in case it exists.
     */
    where: TokenWhereUniqueInput
    /**
     * In case the Token found by the `where` argument doesn't exist, create a new Token with this data.
     */
    create: XOR<TokenCreateInput, TokenUncheckedCreateInput>
    /**
     * In case the Token was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
  }

  /**
   * Token delete
   */
  export type TokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter which Token to delete.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token deleteMany
   */
  export type TokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to delete
     */
    where?: TokenWhereInput
  }

  /**
   * Token without action
   */
  export type TokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
  }


  /**
   * Model Plum
   */

  export type AggregatePlum = {
    _count: PlumCountAggregateOutputType | null
    _avg: PlumAvgAggregateOutputType | null
    _sum: PlumSumAggregateOutputType | null
    _min: PlumMinAggregateOutputType | null
    _max: PlumMaxAggregateOutputType | null
  }

  export type PlumAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    actionId: number | null
    triggerId: number | null
  }

  export type PlumSumAggregateOutputType = {
    id: number | null
    userId: number | null
    actionId: number | null
    triggerId: number | null
  }

  export type PlumMinAggregateOutputType = {
    id: number | null
    userId: number | null
    actionId: number | null
    triggerId: number | null
  }

  export type PlumMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    actionId: number | null
    triggerId: number | null
  }

  export type PlumCountAggregateOutputType = {
    id: number
    userId: number
    actionId: number
    triggerId: number
    _all: number
  }


  export type PlumAvgAggregateInputType = {
    id?: true
    userId?: true
    actionId?: true
    triggerId?: true
  }

  export type PlumSumAggregateInputType = {
    id?: true
    userId?: true
    actionId?: true
    triggerId?: true
  }

  export type PlumMinAggregateInputType = {
    id?: true
    userId?: true
    actionId?: true
    triggerId?: true
  }

  export type PlumMaxAggregateInputType = {
    id?: true
    userId?: true
    actionId?: true
    triggerId?: true
  }

  export type PlumCountAggregateInputType = {
    id?: true
    userId?: true
    actionId?: true
    triggerId?: true
    _all?: true
  }

  export type PlumAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plum to aggregate.
     */
    where?: PlumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plums to fetch.
     */
    orderBy?: PlumOrderByWithRelationInput | PlumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Plums
    **/
    _count?: true | PlumCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlumAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlumSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlumMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlumMaxAggregateInputType
  }

  export type GetPlumAggregateType<T extends PlumAggregateArgs> = {
        [P in keyof T & keyof AggregatePlum]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlum[P]>
      : GetScalarType<T[P], AggregatePlum[P]>
  }




  export type PlumGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlumWhereInput
    orderBy?: PlumOrderByWithAggregationInput | PlumOrderByWithAggregationInput[]
    by: PlumScalarFieldEnum[] | PlumScalarFieldEnum
    having?: PlumScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlumCountAggregateInputType | true
    _avg?: PlumAvgAggregateInputType
    _sum?: PlumSumAggregateInputType
    _min?: PlumMinAggregateInputType
    _max?: PlumMaxAggregateInputType
  }

  export type PlumGroupByOutputType = {
    id: number
    userId: number
    actionId: number
    triggerId: number
    _count: PlumCountAggregateOutputType | null
    _avg: PlumAvgAggregateOutputType | null
    _sum: PlumSumAggregateOutputType | null
    _min: PlumMinAggregateOutputType | null
    _max: PlumMaxAggregateOutputType | null
  }

  type GetPlumGroupByPayload<T extends PlumGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlumGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlumGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlumGroupByOutputType[P]>
            : GetScalarType<T[P], PlumGroupByOutputType[P]>
        }
      >
    >


  export type PlumSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    actionId?: boolean
    triggerId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    action?: boolean | ActionDefaultArgs<ExtArgs>
    trigger?: boolean | TriggerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plum"]>

  export type PlumSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    actionId?: boolean
    triggerId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    action?: boolean | ActionDefaultArgs<ExtArgs>
    trigger?: boolean | TriggerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plum"]>

  export type PlumSelectScalar = {
    id?: boolean
    userId?: boolean
    actionId?: boolean
    triggerId?: boolean
  }

  export type PlumInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    action?: boolean | ActionDefaultArgs<ExtArgs>
    trigger?: boolean | TriggerDefaultArgs<ExtArgs>
  }
  export type PlumIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    action?: boolean | ActionDefaultArgs<ExtArgs>
    trigger?: boolean | TriggerDefaultArgs<ExtArgs>
  }

  export type $PlumPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Plum"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      action: Prisma.$ActionPayload<ExtArgs>
      trigger: Prisma.$TriggerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      actionId: number
      triggerId: number
    }, ExtArgs["result"]["plum"]>
    composites: {}
  }

  type PlumGetPayload<S extends boolean | null | undefined | PlumDefaultArgs> = $Result.GetResult<Prisma.$PlumPayload, S>

  type PlumCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlumFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlumCountAggregateInputType | true
    }

  export interface PlumDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Plum'], meta: { name: 'Plum' } }
    /**
     * Find zero or one Plum that matches the filter.
     * @param {PlumFindUniqueArgs} args - Arguments to find a Plum
     * @example
     * // Get one Plum
     * const plum = await prisma.plum.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlumFindUniqueArgs>(args: SelectSubset<T, PlumFindUniqueArgs<ExtArgs>>): Prisma__PlumClient<$Result.GetResult<Prisma.$PlumPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Plum that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlumFindUniqueOrThrowArgs} args - Arguments to find a Plum
     * @example
     * // Get one Plum
     * const plum = await prisma.plum.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlumFindUniqueOrThrowArgs>(args: SelectSubset<T, PlumFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlumClient<$Result.GetResult<Prisma.$PlumPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Plum that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlumFindFirstArgs} args - Arguments to find a Plum
     * @example
     * // Get one Plum
     * const plum = await prisma.plum.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlumFindFirstArgs>(args?: SelectSubset<T, PlumFindFirstArgs<ExtArgs>>): Prisma__PlumClient<$Result.GetResult<Prisma.$PlumPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Plum that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlumFindFirstOrThrowArgs} args - Arguments to find a Plum
     * @example
     * // Get one Plum
     * const plum = await prisma.plum.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlumFindFirstOrThrowArgs>(args?: SelectSubset<T, PlumFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlumClient<$Result.GetResult<Prisma.$PlumPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Plums that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlumFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plums
     * const plums = await prisma.plum.findMany()
     * 
     * // Get first 10 Plums
     * const plums = await prisma.plum.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plumWithIdOnly = await prisma.plum.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlumFindManyArgs>(args?: SelectSubset<T, PlumFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlumPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Plum.
     * @param {PlumCreateArgs} args - Arguments to create a Plum.
     * @example
     * // Create one Plum
     * const Plum = await prisma.plum.create({
     *   data: {
     *     // ... data to create a Plum
     *   }
     * })
     * 
     */
    create<T extends PlumCreateArgs>(args: SelectSubset<T, PlumCreateArgs<ExtArgs>>): Prisma__PlumClient<$Result.GetResult<Prisma.$PlumPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Plums.
     * @param {PlumCreateManyArgs} args - Arguments to create many Plums.
     * @example
     * // Create many Plums
     * const plum = await prisma.plum.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlumCreateManyArgs>(args?: SelectSubset<T, PlumCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Plums and returns the data saved in the database.
     * @param {PlumCreateManyAndReturnArgs} args - Arguments to create many Plums.
     * @example
     * // Create many Plums
     * const plum = await prisma.plum.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Plums and only return the `id`
     * const plumWithIdOnly = await prisma.plum.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlumCreateManyAndReturnArgs>(args?: SelectSubset<T, PlumCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlumPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Plum.
     * @param {PlumDeleteArgs} args - Arguments to delete one Plum.
     * @example
     * // Delete one Plum
     * const Plum = await prisma.plum.delete({
     *   where: {
     *     // ... filter to delete one Plum
     *   }
     * })
     * 
     */
    delete<T extends PlumDeleteArgs>(args: SelectSubset<T, PlumDeleteArgs<ExtArgs>>): Prisma__PlumClient<$Result.GetResult<Prisma.$PlumPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Plum.
     * @param {PlumUpdateArgs} args - Arguments to update one Plum.
     * @example
     * // Update one Plum
     * const plum = await prisma.plum.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlumUpdateArgs>(args: SelectSubset<T, PlumUpdateArgs<ExtArgs>>): Prisma__PlumClient<$Result.GetResult<Prisma.$PlumPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Plums.
     * @param {PlumDeleteManyArgs} args - Arguments to filter Plums to delete.
     * @example
     * // Delete a few Plums
     * const { count } = await prisma.plum.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlumDeleteManyArgs>(args?: SelectSubset<T, PlumDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlumUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plums
     * const plum = await prisma.plum.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlumUpdateManyArgs>(args: SelectSubset<T, PlumUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Plum.
     * @param {PlumUpsertArgs} args - Arguments to update or create a Plum.
     * @example
     * // Update or create a Plum
     * const plum = await prisma.plum.upsert({
     *   create: {
     *     // ... data to create a Plum
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plum we want to update
     *   }
     * })
     */
    upsert<T extends PlumUpsertArgs>(args: SelectSubset<T, PlumUpsertArgs<ExtArgs>>): Prisma__PlumClient<$Result.GetResult<Prisma.$PlumPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Plums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlumCountArgs} args - Arguments to filter Plums to count.
     * @example
     * // Count the number of Plums
     * const count = await prisma.plum.count({
     *   where: {
     *     // ... the filter for the Plums we want to count
     *   }
     * })
    **/
    count<T extends PlumCountArgs>(
      args?: Subset<T, PlumCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlumCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plum.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlumAggregateArgs>(args: Subset<T, PlumAggregateArgs>): Prisma.PrismaPromise<GetPlumAggregateType<T>>

    /**
     * Group by Plum.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlumGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlumGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlumGroupByArgs['orderBy'] }
        : { orderBy?: PlumGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Plum model
   */
  readonly fields: PlumFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Plum.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlumClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    action<T extends ActionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActionDefaultArgs<ExtArgs>>): Prisma__ActionClient<$Result.GetResult<Prisma.$ActionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    trigger<T extends TriggerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TriggerDefaultArgs<ExtArgs>>): Prisma__TriggerClient<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Plum model
   */ 
  interface PlumFieldRefs {
    readonly id: FieldRef<"Plum", 'Int'>
    readonly userId: FieldRef<"Plum", 'Int'>
    readonly actionId: FieldRef<"Plum", 'Int'>
    readonly triggerId: FieldRef<"Plum", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Plum findUnique
   */
  export type PlumFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plum
     */
    select?: PlumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlumInclude<ExtArgs> | null
    /**
     * Filter, which Plum to fetch.
     */
    where: PlumWhereUniqueInput
  }

  /**
   * Plum findUniqueOrThrow
   */
  export type PlumFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plum
     */
    select?: PlumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlumInclude<ExtArgs> | null
    /**
     * Filter, which Plum to fetch.
     */
    where: PlumWhereUniqueInput
  }

  /**
   * Plum findFirst
   */
  export type PlumFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plum
     */
    select?: PlumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlumInclude<ExtArgs> | null
    /**
     * Filter, which Plum to fetch.
     */
    where?: PlumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plums to fetch.
     */
    orderBy?: PlumOrderByWithRelationInput | PlumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plums.
     */
    cursor?: PlumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plums.
     */
    distinct?: PlumScalarFieldEnum | PlumScalarFieldEnum[]
  }

  /**
   * Plum findFirstOrThrow
   */
  export type PlumFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plum
     */
    select?: PlumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlumInclude<ExtArgs> | null
    /**
     * Filter, which Plum to fetch.
     */
    where?: PlumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plums to fetch.
     */
    orderBy?: PlumOrderByWithRelationInput | PlumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plums.
     */
    cursor?: PlumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plums.
     */
    distinct?: PlumScalarFieldEnum | PlumScalarFieldEnum[]
  }

  /**
   * Plum findMany
   */
  export type PlumFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plum
     */
    select?: PlumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlumInclude<ExtArgs> | null
    /**
     * Filter, which Plums to fetch.
     */
    where?: PlumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plums to fetch.
     */
    orderBy?: PlumOrderByWithRelationInput | PlumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Plums.
     */
    cursor?: PlumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plums.
     */
    skip?: number
    distinct?: PlumScalarFieldEnum | PlumScalarFieldEnum[]
  }

  /**
   * Plum create
   */
  export type PlumCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plum
     */
    select?: PlumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlumInclude<ExtArgs> | null
    /**
     * The data needed to create a Plum.
     */
    data: XOR<PlumCreateInput, PlumUncheckedCreateInput>
  }

  /**
   * Plum createMany
   */
  export type PlumCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Plums.
     */
    data: PlumCreateManyInput | PlumCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Plum createManyAndReturn
   */
  export type PlumCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plum
     */
    select?: PlumSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Plums.
     */
    data: PlumCreateManyInput | PlumCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlumIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Plum update
   */
  export type PlumUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plum
     */
    select?: PlumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlumInclude<ExtArgs> | null
    /**
     * The data needed to update a Plum.
     */
    data: XOR<PlumUpdateInput, PlumUncheckedUpdateInput>
    /**
     * Choose, which Plum to update.
     */
    where: PlumWhereUniqueInput
  }

  /**
   * Plum updateMany
   */
  export type PlumUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Plums.
     */
    data: XOR<PlumUpdateManyMutationInput, PlumUncheckedUpdateManyInput>
    /**
     * Filter which Plums to update
     */
    where?: PlumWhereInput
  }

  /**
   * Plum upsert
   */
  export type PlumUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plum
     */
    select?: PlumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlumInclude<ExtArgs> | null
    /**
     * The filter to search for the Plum to update in case it exists.
     */
    where: PlumWhereUniqueInput
    /**
     * In case the Plum found by the `where` argument doesn't exist, create a new Plum with this data.
     */
    create: XOR<PlumCreateInput, PlumUncheckedCreateInput>
    /**
     * In case the Plum was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlumUpdateInput, PlumUncheckedUpdateInput>
  }

  /**
   * Plum delete
   */
  export type PlumDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plum
     */
    select?: PlumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlumInclude<ExtArgs> | null
    /**
     * Filter which Plum to delete.
     */
    where: PlumWhereUniqueInput
  }

  /**
   * Plum deleteMany
   */
  export type PlumDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plums to delete
     */
    where?: PlumWhereInput
  }

  /**
   * Plum without action
   */
  export type PlumDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plum
     */
    select?: PlumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlumInclude<ExtArgs> | null
  }


  /**
   * Model ActionTemplate
   */

  export type AggregateActionTemplate = {
    _count: ActionTemplateCountAggregateOutputType | null
    _avg: ActionTemplateAvgAggregateOutputType | null
    _sum: ActionTemplateSumAggregateOutputType | null
    _min: ActionTemplateMinAggregateOutputType | null
    _max: ActionTemplateMaxAggregateOutputType | null
  }

  export type ActionTemplateAvgAggregateOutputType = {
    id: number | null
  }

  export type ActionTemplateSumAggregateOutputType = {
    id: number | null
  }

  export type ActionTemplateMinAggregateOutputType = {
    id: number | null
    name: string | null
    actFunc: string | null
  }

  export type ActionTemplateMaxAggregateOutputType = {
    id: number | null
    name: string | null
    actFunc: string | null
  }

  export type ActionTemplateCountAggregateOutputType = {
    id: number
    name: number
    actFunc: number
    valueTemplate: number
    _all: number
  }


  export type ActionTemplateAvgAggregateInputType = {
    id?: true
  }

  export type ActionTemplateSumAggregateInputType = {
    id?: true
  }

  export type ActionTemplateMinAggregateInputType = {
    id?: true
    name?: true
    actFunc?: true
  }

  export type ActionTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    actFunc?: true
  }

  export type ActionTemplateCountAggregateInputType = {
    id?: true
    name?: true
    actFunc?: true
    valueTemplate?: true
    _all?: true
  }

  export type ActionTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActionTemplate to aggregate.
     */
    where?: ActionTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionTemplates to fetch.
     */
    orderBy?: ActionTemplateOrderByWithRelationInput | ActionTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActionTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActionTemplates
    **/
    _count?: true | ActionTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActionTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActionTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActionTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActionTemplateMaxAggregateInputType
  }

  export type GetActionTemplateAggregateType<T extends ActionTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateActionTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActionTemplate[P]>
      : GetScalarType<T[P], AggregateActionTemplate[P]>
  }




  export type ActionTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionTemplateWhereInput
    orderBy?: ActionTemplateOrderByWithAggregationInput | ActionTemplateOrderByWithAggregationInput[]
    by: ActionTemplateScalarFieldEnum[] | ActionTemplateScalarFieldEnum
    having?: ActionTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActionTemplateCountAggregateInputType | true
    _avg?: ActionTemplateAvgAggregateInputType
    _sum?: ActionTemplateSumAggregateInputType
    _min?: ActionTemplateMinAggregateInputType
    _max?: ActionTemplateMaxAggregateInputType
  }

  export type ActionTemplateGroupByOutputType = {
    id: number
    name: string
    actFunc: string
    valueTemplate: JsonValue
    _count: ActionTemplateCountAggregateOutputType | null
    _avg: ActionTemplateAvgAggregateOutputType | null
    _sum: ActionTemplateSumAggregateOutputType | null
    _min: ActionTemplateMinAggregateOutputType | null
    _max: ActionTemplateMaxAggregateOutputType | null
  }

  type GetActionTemplateGroupByPayload<T extends ActionTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActionTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActionTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActionTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], ActionTemplateGroupByOutputType[P]>
        }
      >
    >


  export type ActionTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    actFunc?: boolean
    valueTemplate?: boolean
    actions?: boolean | ActionTemplate$actionsArgs<ExtArgs>
    _count?: boolean | ActionTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["actionTemplate"]>

  export type ActionTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    actFunc?: boolean
    valueTemplate?: boolean
  }, ExtArgs["result"]["actionTemplate"]>

  export type ActionTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    actFunc?: boolean
    valueTemplate?: boolean
  }

  export type ActionTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actions?: boolean | ActionTemplate$actionsArgs<ExtArgs>
    _count?: boolean | ActionTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ActionTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ActionTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActionTemplate"
    objects: {
      actions: Prisma.$ActionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      actFunc: string
      valueTemplate: Prisma.JsonValue
    }, ExtArgs["result"]["actionTemplate"]>
    composites: {}
  }

  type ActionTemplateGetPayload<S extends boolean | null | undefined | ActionTemplateDefaultArgs> = $Result.GetResult<Prisma.$ActionTemplatePayload, S>

  type ActionTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActionTemplateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActionTemplateCountAggregateInputType | true
    }

  export interface ActionTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActionTemplate'], meta: { name: 'ActionTemplate' } }
    /**
     * Find zero or one ActionTemplate that matches the filter.
     * @param {ActionTemplateFindUniqueArgs} args - Arguments to find a ActionTemplate
     * @example
     * // Get one ActionTemplate
     * const actionTemplate = await prisma.actionTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActionTemplateFindUniqueArgs>(args: SelectSubset<T, ActionTemplateFindUniqueArgs<ExtArgs>>): Prisma__ActionTemplateClient<$Result.GetResult<Prisma.$ActionTemplatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ActionTemplate that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ActionTemplateFindUniqueOrThrowArgs} args - Arguments to find a ActionTemplate
     * @example
     * // Get one ActionTemplate
     * const actionTemplate = await prisma.actionTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActionTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, ActionTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActionTemplateClient<$Result.GetResult<Prisma.$ActionTemplatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ActionTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionTemplateFindFirstArgs} args - Arguments to find a ActionTemplate
     * @example
     * // Get one ActionTemplate
     * const actionTemplate = await prisma.actionTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActionTemplateFindFirstArgs>(args?: SelectSubset<T, ActionTemplateFindFirstArgs<ExtArgs>>): Prisma__ActionTemplateClient<$Result.GetResult<Prisma.$ActionTemplatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ActionTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionTemplateFindFirstOrThrowArgs} args - Arguments to find a ActionTemplate
     * @example
     * // Get one ActionTemplate
     * const actionTemplate = await prisma.actionTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActionTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, ActionTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActionTemplateClient<$Result.GetResult<Prisma.$ActionTemplatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ActionTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActionTemplates
     * const actionTemplates = await prisma.actionTemplate.findMany()
     * 
     * // Get first 10 ActionTemplates
     * const actionTemplates = await prisma.actionTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const actionTemplateWithIdOnly = await prisma.actionTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActionTemplateFindManyArgs>(args?: SelectSubset<T, ActionTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionTemplatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ActionTemplate.
     * @param {ActionTemplateCreateArgs} args - Arguments to create a ActionTemplate.
     * @example
     * // Create one ActionTemplate
     * const ActionTemplate = await prisma.actionTemplate.create({
     *   data: {
     *     // ... data to create a ActionTemplate
     *   }
     * })
     * 
     */
    create<T extends ActionTemplateCreateArgs>(args: SelectSubset<T, ActionTemplateCreateArgs<ExtArgs>>): Prisma__ActionTemplateClient<$Result.GetResult<Prisma.$ActionTemplatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ActionTemplates.
     * @param {ActionTemplateCreateManyArgs} args - Arguments to create many ActionTemplates.
     * @example
     * // Create many ActionTemplates
     * const actionTemplate = await prisma.actionTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActionTemplateCreateManyArgs>(args?: SelectSubset<T, ActionTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActionTemplates and returns the data saved in the database.
     * @param {ActionTemplateCreateManyAndReturnArgs} args - Arguments to create many ActionTemplates.
     * @example
     * // Create many ActionTemplates
     * const actionTemplate = await prisma.actionTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActionTemplates and only return the `id`
     * const actionTemplateWithIdOnly = await prisma.actionTemplate.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActionTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, ActionTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionTemplatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ActionTemplate.
     * @param {ActionTemplateDeleteArgs} args - Arguments to delete one ActionTemplate.
     * @example
     * // Delete one ActionTemplate
     * const ActionTemplate = await prisma.actionTemplate.delete({
     *   where: {
     *     // ... filter to delete one ActionTemplate
     *   }
     * })
     * 
     */
    delete<T extends ActionTemplateDeleteArgs>(args: SelectSubset<T, ActionTemplateDeleteArgs<ExtArgs>>): Prisma__ActionTemplateClient<$Result.GetResult<Prisma.$ActionTemplatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ActionTemplate.
     * @param {ActionTemplateUpdateArgs} args - Arguments to update one ActionTemplate.
     * @example
     * // Update one ActionTemplate
     * const actionTemplate = await prisma.actionTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActionTemplateUpdateArgs>(args: SelectSubset<T, ActionTemplateUpdateArgs<ExtArgs>>): Prisma__ActionTemplateClient<$Result.GetResult<Prisma.$ActionTemplatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ActionTemplates.
     * @param {ActionTemplateDeleteManyArgs} args - Arguments to filter ActionTemplates to delete.
     * @example
     * // Delete a few ActionTemplates
     * const { count } = await prisma.actionTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActionTemplateDeleteManyArgs>(args?: SelectSubset<T, ActionTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActionTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActionTemplates
     * const actionTemplate = await prisma.actionTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActionTemplateUpdateManyArgs>(args: SelectSubset<T, ActionTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ActionTemplate.
     * @param {ActionTemplateUpsertArgs} args - Arguments to update or create a ActionTemplate.
     * @example
     * // Update or create a ActionTemplate
     * const actionTemplate = await prisma.actionTemplate.upsert({
     *   create: {
     *     // ... data to create a ActionTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActionTemplate we want to update
     *   }
     * })
     */
    upsert<T extends ActionTemplateUpsertArgs>(args: SelectSubset<T, ActionTemplateUpsertArgs<ExtArgs>>): Prisma__ActionTemplateClient<$Result.GetResult<Prisma.$ActionTemplatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ActionTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionTemplateCountArgs} args - Arguments to filter ActionTemplates to count.
     * @example
     * // Count the number of ActionTemplates
     * const count = await prisma.actionTemplate.count({
     *   where: {
     *     // ... the filter for the ActionTemplates we want to count
     *   }
     * })
    **/
    count<T extends ActionTemplateCountArgs>(
      args?: Subset<T, ActionTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActionTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActionTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActionTemplateAggregateArgs>(args: Subset<T, ActionTemplateAggregateArgs>): Prisma.PrismaPromise<GetActionTemplateAggregateType<T>>

    /**
     * Group by ActionTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActionTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActionTemplateGroupByArgs['orderBy'] }
        : { orderBy?: ActionTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActionTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActionTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActionTemplate model
   */
  readonly fields: ActionTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActionTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActionTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    actions<T extends ActionTemplate$actionsArgs<ExtArgs> = {}>(args?: Subset<T, ActionTemplate$actionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActionTemplate model
   */ 
  interface ActionTemplateFieldRefs {
    readonly id: FieldRef<"ActionTemplate", 'Int'>
    readonly name: FieldRef<"ActionTemplate", 'String'>
    readonly actFunc: FieldRef<"ActionTemplate", 'String'>
    readonly valueTemplate: FieldRef<"ActionTemplate", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * ActionTemplate findUnique
   */
  export type ActionTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionTemplate
     */
    select?: ActionTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ActionTemplate to fetch.
     */
    where: ActionTemplateWhereUniqueInput
  }

  /**
   * ActionTemplate findUniqueOrThrow
   */
  export type ActionTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionTemplate
     */
    select?: ActionTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ActionTemplate to fetch.
     */
    where: ActionTemplateWhereUniqueInput
  }

  /**
   * ActionTemplate findFirst
   */
  export type ActionTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionTemplate
     */
    select?: ActionTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ActionTemplate to fetch.
     */
    where?: ActionTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionTemplates to fetch.
     */
    orderBy?: ActionTemplateOrderByWithRelationInput | ActionTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActionTemplates.
     */
    cursor?: ActionTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActionTemplates.
     */
    distinct?: ActionTemplateScalarFieldEnum | ActionTemplateScalarFieldEnum[]
  }

  /**
   * ActionTemplate findFirstOrThrow
   */
  export type ActionTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionTemplate
     */
    select?: ActionTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ActionTemplate to fetch.
     */
    where?: ActionTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionTemplates to fetch.
     */
    orderBy?: ActionTemplateOrderByWithRelationInput | ActionTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActionTemplates.
     */
    cursor?: ActionTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActionTemplates.
     */
    distinct?: ActionTemplateScalarFieldEnum | ActionTemplateScalarFieldEnum[]
  }

  /**
   * ActionTemplate findMany
   */
  export type ActionTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionTemplate
     */
    select?: ActionTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ActionTemplates to fetch.
     */
    where?: ActionTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionTemplates to fetch.
     */
    orderBy?: ActionTemplateOrderByWithRelationInput | ActionTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActionTemplates.
     */
    cursor?: ActionTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionTemplates.
     */
    skip?: number
    distinct?: ActionTemplateScalarFieldEnum | ActionTemplateScalarFieldEnum[]
  }

  /**
   * ActionTemplate create
   */
  export type ActionTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionTemplate
     */
    select?: ActionTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a ActionTemplate.
     */
    data: XOR<ActionTemplateCreateInput, ActionTemplateUncheckedCreateInput>
  }

  /**
   * ActionTemplate createMany
   */
  export type ActionTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActionTemplates.
     */
    data: ActionTemplateCreateManyInput | ActionTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActionTemplate createManyAndReturn
   */
  export type ActionTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionTemplate
     */
    select?: ActionTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ActionTemplates.
     */
    data: ActionTemplateCreateManyInput | ActionTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActionTemplate update
   */
  export type ActionTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionTemplate
     */
    select?: ActionTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a ActionTemplate.
     */
    data: XOR<ActionTemplateUpdateInput, ActionTemplateUncheckedUpdateInput>
    /**
     * Choose, which ActionTemplate to update.
     */
    where: ActionTemplateWhereUniqueInput
  }

  /**
   * ActionTemplate updateMany
   */
  export type ActionTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActionTemplates.
     */
    data: XOR<ActionTemplateUpdateManyMutationInput, ActionTemplateUncheckedUpdateManyInput>
    /**
     * Filter which ActionTemplates to update
     */
    where?: ActionTemplateWhereInput
  }

  /**
   * ActionTemplate upsert
   */
  export type ActionTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionTemplate
     */
    select?: ActionTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the ActionTemplate to update in case it exists.
     */
    where: ActionTemplateWhereUniqueInput
    /**
     * In case the ActionTemplate found by the `where` argument doesn't exist, create a new ActionTemplate with this data.
     */
    create: XOR<ActionTemplateCreateInput, ActionTemplateUncheckedCreateInput>
    /**
     * In case the ActionTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActionTemplateUpdateInput, ActionTemplateUncheckedUpdateInput>
  }

  /**
   * ActionTemplate delete
   */
  export type ActionTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionTemplate
     */
    select?: ActionTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionTemplateInclude<ExtArgs> | null
    /**
     * Filter which ActionTemplate to delete.
     */
    where: ActionTemplateWhereUniqueInput
  }

  /**
   * ActionTemplate deleteMany
   */
  export type ActionTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActionTemplates to delete
     */
    where?: ActionTemplateWhereInput
  }

  /**
   * ActionTemplate.actions
   */
  export type ActionTemplate$actionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Action
     */
    select?: ActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionInclude<ExtArgs> | null
    where?: ActionWhereInput
    orderBy?: ActionOrderByWithRelationInput | ActionOrderByWithRelationInput[]
    cursor?: ActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActionScalarFieldEnum | ActionScalarFieldEnum[]
  }

  /**
   * ActionTemplate without action
   */
  export type ActionTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionTemplate
     */
    select?: ActionTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionTemplateInclude<ExtArgs> | null
  }


  /**
   * Model Action
   */

  export type AggregateAction = {
    _count: ActionCountAggregateOutputType | null
    _avg: ActionAvgAggregateOutputType | null
    _sum: ActionSumAggregateOutputType | null
    _min: ActionMinAggregateOutputType | null
    _max: ActionMaxAggregateOutputType | null
  }

  export type ActionAvgAggregateOutputType = {
    id: number | null
    actionTemplateId: number | null
  }

  export type ActionSumAggregateOutputType = {
    id: number | null
    actionTemplateId: number | null
  }

  export type ActionMinAggregateOutputType = {
    id: number | null
    actionTemplateId: number | null
  }

  export type ActionMaxAggregateOutputType = {
    id: number | null
    actionTemplateId: number | null
  }

  export type ActionCountAggregateOutputType = {
    id: number
    actionValue: number
    actionTemplateId: number
    _all: number
  }


  export type ActionAvgAggregateInputType = {
    id?: true
    actionTemplateId?: true
  }

  export type ActionSumAggregateInputType = {
    id?: true
    actionTemplateId?: true
  }

  export type ActionMinAggregateInputType = {
    id?: true
    actionTemplateId?: true
  }

  export type ActionMaxAggregateInputType = {
    id?: true
    actionTemplateId?: true
  }

  export type ActionCountAggregateInputType = {
    id?: true
    actionValue?: true
    actionTemplateId?: true
    _all?: true
  }

  export type ActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Action to aggregate.
     */
    where?: ActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actions to fetch.
     */
    orderBy?: ActionOrderByWithRelationInput | ActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Actions
    **/
    _count?: true | ActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActionMaxAggregateInputType
  }

  export type GetActionAggregateType<T extends ActionAggregateArgs> = {
        [P in keyof T & keyof AggregateAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAction[P]>
      : GetScalarType<T[P], AggregateAction[P]>
  }




  export type ActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionWhereInput
    orderBy?: ActionOrderByWithAggregationInput | ActionOrderByWithAggregationInput[]
    by: ActionScalarFieldEnum[] | ActionScalarFieldEnum
    having?: ActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActionCountAggregateInputType | true
    _avg?: ActionAvgAggregateInputType
    _sum?: ActionSumAggregateInputType
    _min?: ActionMinAggregateInputType
    _max?: ActionMaxAggregateInputType
  }

  export type ActionGroupByOutputType = {
    id: number
    actionValue: JsonValue
    actionTemplateId: number
    _count: ActionCountAggregateOutputType | null
    _avg: ActionAvgAggregateOutputType | null
    _sum: ActionSumAggregateOutputType | null
    _min: ActionMinAggregateOutputType | null
    _max: ActionMaxAggregateOutputType | null
  }

  type GetActionGroupByPayload<T extends ActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActionGroupByOutputType[P]>
            : GetScalarType<T[P], ActionGroupByOutputType[P]>
        }
      >
    >


  export type ActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actionValue?: boolean
    actionTemplateId?: boolean
    actionTemplate?: boolean | ActionTemplateDefaultArgs<ExtArgs>
    plums?: boolean | Action$plumsArgs<ExtArgs>
    _count?: boolean | ActionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["action"]>

  export type ActionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actionValue?: boolean
    actionTemplateId?: boolean
    actionTemplate?: boolean | ActionTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["action"]>

  export type ActionSelectScalar = {
    id?: boolean
    actionValue?: boolean
    actionTemplateId?: boolean
  }

  export type ActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actionTemplate?: boolean | ActionTemplateDefaultArgs<ExtArgs>
    plums?: boolean | Action$plumsArgs<ExtArgs>
    _count?: boolean | ActionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ActionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actionTemplate?: boolean | ActionTemplateDefaultArgs<ExtArgs>
  }

  export type $ActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Action"
    objects: {
      actionTemplate: Prisma.$ActionTemplatePayload<ExtArgs>
      plums: Prisma.$PlumPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      actionValue: Prisma.JsonValue
      actionTemplateId: number
    }, ExtArgs["result"]["action"]>
    composites: {}
  }

  type ActionGetPayload<S extends boolean | null | undefined | ActionDefaultArgs> = $Result.GetResult<Prisma.$ActionPayload, S>

  type ActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActionCountAggregateInputType | true
    }

  export interface ActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Action'], meta: { name: 'Action' } }
    /**
     * Find zero or one Action that matches the filter.
     * @param {ActionFindUniqueArgs} args - Arguments to find a Action
     * @example
     * // Get one Action
     * const action = await prisma.action.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActionFindUniqueArgs>(args: SelectSubset<T, ActionFindUniqueArgs<ExtArgs>>): Prisma__ActionClient<$Result.GetResult<Prisma.$ActionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Action that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ActionFindUniqueOrThrowArgs} args - Arguments to find a Action
     * @example
     * // Get one Action
     * const action = await prisma.action.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActionFindUniqueOrThrowArgs>(args: SelectSubset<T, ActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActionClient<$Result.GetResult<Prisma.$ActionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Action that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionFindFirstArgs} args - Arguments to find a Action
     * @example
     * // Get one Action
     * const action = await prisma.action.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActionFindFirstArgs>(args?: SelectSubset<T, ActionFindFirstArgs<ExtArgs>>): Prisma__ActionClient<$Result.GetResult<Prisma.$ActionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Action that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionFindFirstOrThrowArgs} args - Arguments to find a Action
     * @example
     * // Get one Action
     * const action = await prisma.action.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActionFindFirstOrThrowArgs>(args?: SelectSubset<T, ActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActionClient<$Result.GetResult<Prisma.$ActionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Actions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Actions
     * const actions = await prisma.action.findMany()
     * 
     * // Get first 10 Actions
     * const actions = await prisma.action.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const actionWithIdOnly = await prisma.action.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActionFindManyArgs>(args?: SelectSubset<T, ActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Action.
     * @param {ActionCreateArgs} args - Arguments to create a Action.
     * @example
     * // Create one Action
     * const Action = await prisma.action.create({
     *   data: {
     *     // ... data to create a Action
     *   }
     * })
     * 
     */
    create<T extends ActionCreateArgs>(args: SelectSubset<T, ActionCreateArgs<ExtArgs>>): Prisma__ActionClient<$Result.GetResult<Prisma.$ActionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Actions.
     * @param {ActionCreateManyArgs} args - Arguments to create many Actions.
     * @example
     * // Create many Actions
     * const action = await prisma.action.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActionCreateManyArgs>(args?: SelectSubset<T, ActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Actions and returns the data saved in the database.
     * @param {ActionCreateManyAndReturnArgs} args - Arguments to create many Actions.
     * @example
     * // Create many Actions
     * const action = await prisma.action.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Actions and only return the `id`
     * const actionWithIdOnly = await prisma.action.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActionCreateManyAndReturnArgs>(args?: SelectSubset<T, ActionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Action.
     * @param {ActionDeleteArgs} args - Arguments to delete one Action.
     * @example
     * // Delete one Action
     * const Action = await prisma.action.delete({
     *   where: {
     *     // ... filter to delete one Action
     *   }
     * })
     * 
     */
    delete<T extends ActionDeleteArgs>(args: SelectSubset<T, ActionDeleteArgs<ExtArgs>>): Prisma__ActionClient<$Result.GetResult<Prisma.$ActionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Action.
     * @param {ActionUpdateArgs} args - Arguments to update one Action.
     * @example
     * // Update one Action
     * const action = await prisma.action.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActionUpdateArgs>(args: SelectSubset<T, ActionUpdateArgs<ExtArgs>>): Prisma__ActionClient<$Result.GetResult<Prisma.$ActionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Actions.
     * @param {ActionDeleteManyArgs} args - Arguments to filter Actions to delete.
     * @example
     * // Delete a few Actions
     * const { count } = await prisma.action.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActionDeleteManyArgs>(args?: SelectSubset<T, ActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Actions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Actions
     * const action = await prisma.action.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActionUpdateManyArgs>(args: SelectSubset<T, ActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Action.
     * @param {ActionUpsertArgs} args - Arguments to update or create a Action.
     * @example
     * // Update or create a Action
     * const action = await prisma.action.upsert({
     *   create: {
     *     // ... data to create a Action
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Action we want to update
     *   }
     * })
     */
    upsert<T extends ActionUpsertArgs>(args: SelectSubset<T, ActionUpsertArgs<ExtArgs>>): Prisma__ActionClient<$Result.GetResult<Prisma.$ActionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Actions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionCountArgs} args - Arguments to filter Actions to count.
     * @example
     * // Count the number of Actions
     * const count = await prisma.action.count({
     *   where: {
     *     // ... the filter for the Actions we want to count
     *   }
     * })
    **/
    count<T extends ActionCountArgs>(
      args?: Subset<T, ActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Action.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActionAggregateArgs>(args: Subset<T, ActionAggregateArgs>): Prisma.PrismaPromise<GetActionAggregateType<T>>

    /**
     * Group by Action.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActionGroupByArgs['orderBy'] }
        : { orderBy?: ActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Action model
   */
  readonly fields: ActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Action.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    actionTemplate<T extends ActionTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActionTemplateDefaultArgs<ExtArgs>>): Prisma__ActionTemplateClient<$Result.GetResult<Prisma.$ActionTemplatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    plums<T extends Action$plumsArgs<ExtArgs> = {}>(args?: Subset<T, Action$plumsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlumPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Action model
   */ 
  interface ActionFieldRefs {
    readonly id: FieldRef<"Action", 'Int'>
    readonly actionValue: FieldRef<"Action", 'Json'>
    readonly actionTemplateId: FieldRef<"Action", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Action findUnique
   */
  export type ActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Action
     */
    select?: ActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionInclude<ExtArgs> | null
    /**
     * Filter, which Action to fetch.
     */
    where: ActionWhereUniqueInput
  }

  /**
   * Action findUniqueOrThrow
   */
  export type ActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Action
     */
    select?: ActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionInclude<ExtArgs> | null
    /**
     * Filter, which Action to fetch.
     */
    where: ActionWhereUniqueInput
  }

  /**
   * Action findFirst
   */
  export type ActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Action
     */
    select?: ActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionInclude<ExtArgs> | null
    /**
     * Filter, which Action to fetch.
     */
    where?: ActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actions to fetch.
     */
    orderBy?: ActionOrderByWithRelationInput | ActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Actions.
     */
    cursor?: ActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Actions.
     */
    distinct?: ActionScalarFieldEnum | ActionScalarFieldEnum[]
  }

  /**
   * Action findFirstOrThrow
   */
  export type ActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Action
     */
    select?: ActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionInclude<ExtArgs> | null
    /**
     * Filter, which Action to fetch.
     */
    where?: ActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actions to fetch.
     */
    orderBy?: ActionOrderByWithRelationInput | ActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Actions.
     */
    cursor?: ActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Actions.
     */
    distinct?: ActionScalarFieldEnum | ActionScalarFieldEnum[]
  }

  /**
   * Action findMany
   */
  export type ActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Action
     */
    select?: ActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionInclude<ExtArgs> | null
    /**
     * Filter, which Actions to fetch.
     */
    where?: ActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actions to fetch.
     */
    orderBy?: ActionOrderByWithRelationInput | ActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Actions.
     */
    cursor?: ActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actions.
     */
    skip?: number
    distinct?: ActionScalarFieldEnum | ActionScalarFieldEnum[]
  }

  /**
   * Action create
   */
  export type ActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Action
     */
    select?: ActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionInclude<ExtArgs> | null
    /**
     * The data needed to create a Action.
     */
    data: XOR<ActionCreateInput, ActionUncheckedCreateInput>
  }

  /**
   * Action createMany
   */
  export type ActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Actions.
     */
    data: ActionCreateManyInput | ActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Action createManyAndReturn
   */
  export type ActionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Action
     */
    select?: ActionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Actions.
     */
    data: ActionCreateManyInput | ActionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Action update
   */
  export type ActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Action
     */
    select?: ActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionInclude<ExtArgs> | null
    /**
     * The data needed to update a Action.
     */
    data: XOR<ActionUpdateInput, ActionUncheckedUpdateInput>
    /**
     * Choose, which Action to update.
     */
    where: ActionWhereUniqueInput
  }

  /**
   * Action updateMany
   */
  export type ActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Actions.
     */
    data: XOR<ActionUpdateManyMutationInput, ActionUncheckedUpdateManyInput>
    /**
     * Filter which Actions to update
     */
    where?: ActionWhereInput
  }

  /**
   * Action upsert
   */
  export type ActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Action
     */
    select?: ActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionInclude<ExtArgs> | null
    /**
     * The filter to search for the Action to update in case it exists.
     */
    where: ActionWhereUniqueInput
    /**
     * In case the Action found by the `where` argument doesn't exist, create a new Action with this data.
     */
    create: XOR<ActionCreateInput, ActionUncheckedCreateInput>
    /**
     * In case the Action was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActionUpdateInput, ActionUncheckedUpdateInput>
  }

  /**
   * Action delete
   */
  export type ActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Action
     */
    select?: ActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionInclude<ExtArgs> | null
    /**
     * Filter which Action to delete.
     */
    where: ActionWhereUniqueInput
  }

  /**
   * Action deleteMany
   */
  export type ActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Actions to delete
     */
    where?: ActionWhereInput
  }

  /**
   * Action.plums
   */
  export type Action$plumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plum
     */
    select?: PlumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlumInclude<ExtArgs> | null
    where?: PlumWhereInput
    orderBy?: PlumOrderByWithRelationInput | PlumOrderByWithRelationInput[]
    cursor?: PlumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlumScalarFieldEnum | PlumScalarFieldEnum[]
  }

  /**
   * Action without action
   */
  export type ActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Action
     */
    select?: ActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionInclude<ExtArgs> | null
  }


  /**
   * Model TriggerTemplate
   */

  export type AggregateTriggerTemplate = {
    _count: TriggerTemplateCountAggregateOutputType | null
    _avg: TriggerTemplateAvgAggregateOutputType | null
    _sum: TriggerTemplateSumAggregateOutputType | null
    _min: TriggerTemplateMinAggregateOutputType | null
    _max: TriggerTemplateMaxAggregateOutputType | null
  }

  export type TriggerTemplateAvgAggregateOutputType = {
    id: number | null
  }

  export type TriggerTemplateSumAggregateOutputType = {
    id: number | null
  }

  export type TriggerTemplateMinAggregateOutputType = {
    id: number | null
    name: string | null
    provider: string | null
    type: string | null
    trigFunc: string | null
  }

  export type TriggerTemplateMaxAggregateOutputType = {
    id: number | null
    name: string | null
    provider: string | null
    type: string | null
    trigFunc: string | null
  }

  export type TriggerTemplateCountAggregateOutputType = {
    id: number
    name: number
    provider: number
    type: number
    trigFunc: number
    valueTemplate: number
    _all: number
  }


  export type TriggerTemplateAvgAggregateInputType = {
    id?: true
  }

  export type TriggerTemplateSumAggregateInputType = {
    id?: true
  }

  export type TriggerTemplateMinAggregateInputType = {
    id?: true
    name?: true
    provider?: true
    type?: true
    trigFunc?: true
  }

  export type TriggerTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    provider?: true
    type?: true
    trigFunc?: true
  }

  export type TriggerTemplateCountAggregateInputType = {
    id?: true
    name?: true
    provider?: true
    type?: true
    trigFunc?: true
    valueTemplate?: true
    _all?: true
  }

  export type TriggerTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TriggerTemplate to aggregate.
     */
    where?: TriggerTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriggerTemplates to fetch.
     */
    orderBy?: TriggerTemplateOrderByWithRelationInput | TriggerTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TriggerTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriggerTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriggerTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TriggerTemplates
    **/
    _count?: true | TriggerTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TriggerTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TriggerTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TriggerTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TriggerTemplateMaxAggregateInputType
  }

  export type GetTriggerTemplateAggregateType<T extends TriggerTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateTriggerTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTriggerTemplate[P]>
      : GetScalarType<T[P], AggregateTriggerTemplate[P]>
  }




  export type TriggerTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TriggerTemplateWhereInput
    orderBy?: TriggerTemplateOrderByWithAggregationInput | TriggerTemplateOrderByWithAggregationInput[]
    by: TriggerTemplateScalarFieldEnum[] | TriggerTemplateScalarFieldEnum
    having?: TriggerTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TriggerTemplateCountAggregateInputType | true
    _avg?: TriggerTemplateAvgAggregateInputType
    _sum?: TriggerTemplateSumAggregateInputType
    _min?: TriggerTemplateMinAggregateInputType
    _max?: TriggerTemplateMaxAggregateInputType
  }

  export type TriggerTemplateGroupByOutputType = {
    id: number
    name: string
    provider: string
    type: string
    trigFunc: string
    valueTemplate: JsonValue
    _count: TriggerTemplateCountAggregateOutputType | null
    _avg: TriggerTemplateAvgAggregateOutputType | null
    _sum: TriggerTemplateSumAggregateOutputType | null
    _min: TriggerTemplateMinAggregateOutputType | null
    _max: TriggerTemplateMaxAggregateOutputType | null
  }

  type GetTriggerTemplateGroupByPayload<T extends TriggerTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TriggerTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TriggerTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TriggerTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], TriggerTemplateGroupByOutputType[P]>
        }
      >
    >


  export type TriggerTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    provider?: boolean
    type?: boolean
    trigFunc?: boolean
    valueTemplate?: boolean
    triggers?: boolean | TriggerTemplate$triggersArgs<ExtArgs>
    _count?: boolean | TriggerTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["triggerTemplate"]>

  export type TriggerTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    provider?: boolean
    type?: boolean
    trigFunc?: boolean
    valueTemplate?: boolean
  }, ExtArgs["result"]["triggerTemplate"]>

  export type TriggerTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    provider?: boolean
    type?: boolean
    trigFunc?: boolean
    valueTemplate?: boolean
  }

  export type TriggerTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    triggers?: boolean | TriggerTemplate$triggersArgs<ExtArgs>
    _count?: boolean | TriggerTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TriggerTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TriggerTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TriggerTemplate"
    objects: {
      triggers: Prisma.$TriggerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      provider: string
      type: string
      trigFunc: string
      valueTemplate: Prisma.JsonValue
    }, ExtArgs["result"]["triggerTemplate"]>
    composites: {}
  }

  type TriggerTemplateGetPayload<S extends boolean | null | undefined | TriggerTemplateDefaultArgs> = $Result.GetResult<Prisma.$TriggerTemplatePayload, S>

  type TriggerTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TriggerTemplateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TriggerTemplateCountAggregateInputType | true
    }

  export interface TriggerTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TriggerTemplate'], meta: { name: 'TriggerTemplate' } }
    /**
     * Find zero or one TriggerTemplate that matches the filter.
     * @param {TriggerTemplateFindUniqueArgs} args - Arguments to find a TriggerTemplate
     * @example
     * // Get one TriggerTemplate
     * const triggerTemplate = await prisma.triggerTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TriggerTemplateFindUniqueArgs>(args: SelectSubset<T, TriggerTemplateFindUniqueArgs<ExtArgs>>): Prisma__TriggerTemplateClient<$Result.GetResult<Prisma.$TriggerTemplatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TriggerTemplate that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TriggerTemplateFindUniqueOrThrowArgs} args - Arguments to find a TriggerTemplate
     * @example
     * // Get one TriggerTemplate
     * const triggerTemplate = await prisma.triggerTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TriggerTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, TriggerTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TriggerTemplateClient<$Result.GetResult<Prisma.$TriggerTemplatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TriggerTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerTemplateFindFirstArgs} args - Arguments to find a TriggerTemplate
     * @example
     * // Get one TriggerTemplate
     * const triggerTemplate = await prisma.triggerTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TriggerTemplateFindFirstArgs>(args?: SelectSubset<T, TriggerTemplateFindFirstArgs<ExtArgs>>): Prisma__TriggerTemplateClient<$Result.GetResult<Prisma.$TriggerTemplatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TriggerTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerTemplateFindFirstOrThrowArgs} args - Arguments to find a TriggerTemplate
     * @example
     * // Get one TriggerTemplate
     * const triggerTemplate = await prisma.triggerTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TriggerTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, TriggerTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__TriggerTemplateClient<$Result.GetResult<Prisma.$TriggerTemplatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TriggerTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TriggerTemplates
     * const triggerTemplates = await prisma.triggerTemplate.findMany()
     * 
     * // Get first 10 TriggerTemplates
     * const triggerTemplates = await prisma.triggerTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const triggerTemplateWithIdOnly = await prisma.triggerTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TriggerTemplateFindManyArgs>(args?: SelectSubset<T, TriggerTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TriggerTemplatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TriggerTemplate.
     * @param {TriggerTemplateCreateArgs} args - Arguments to create a TriggerTemplate.
     * @example
     * // Create one TriggerTemplate
     * const TriggerTemplate = await prisma.triggerTemplate.create({
     *   data: {
     *     // ... data to create a TriggerTemplate
     *   }
     * })
     * 
     */
    create<T extends TriggerTemplateCreateArgs>(args: SelectSubset<T, TriggerTemplateCreateArgs<ExtArgs>>): Prisma__TriggerTemplateClient<$Result.GetResult<Prisma.$TriggerTemplatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TriggerTemplates.
     * @param {TriggerTemplateCreateManyArgs} args - Arguments to create many TriggerTemplates.
     * @example
     * // Create many TriggerTemplates
     * const triggerTemplate = await prisma.triggerTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TriggerTemplateCreateManyArgs>(args?: SelectSubset<T, TriggerTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TriggerTemplates and returns the data saved in the database.
     * @param {TriggerTemplateCreateManyAndReturnArgs} args - Arguments to create many TriggerTemplates.
     * @example
     * // Create many TriggerTemplates
     * const triggerTemplate = await prisma.triggerTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TriggerTemplates and only return the `id`
     * const triggerTemplateWithIdOnly = await prisma.triggerTemplate.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TriggerTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, TriggerTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TriggerTemplatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TriggerTemplate.
     * @param {TriggerTemplateDeleteArgs} args - Arguments to delete one TriggerTemplate.
     * @example
     * // Delete one TriggerTemplate
     * const TriggerTemplate = await prisma.triggerTemplate.delete({
     *   where: {
     *     // ... filter to delete one TriggerTemplate
     *   }
     * })
     * 
     */
    delete<T extends TriggerTemplateDeleteArgs>(args: SelectSubset<T, TriggerTemplateDeleteArgs<ExtArgs>>): Prisma__TriggerTemplateClient<$Result.GetResult<Prisma.$TriggerTemplatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TriggerTemplate.
     * @param {TriggerTemplateUpdateArgs} args - Arguments to update one TriggerTemplate.
     * @example
     * // Update one TriggerTemplate
     * const triggerTemplate = await prisma.triggerTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TriggerTemplateUpdateArgs>(args: SelectSubset<T, TriggerTemplateUpdateArgs<ExtArgs>>): Prisma__TriggerTemplateClient<$Result.GetResult<Prisma.$TriggerTemplatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TriggerTemplates.
     * @param {TriggerTemplateDeleteManyArgs} args - Arguments to filter TriggerTemplates to delete.
     * @example
     * // Delete a few TriggerTemplates
     * const { count } = await prisma.triggerTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TriggerTemplateDeleteManyArgs>(args?: SelectSubset<T, TriggerTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TriggerTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TriggerTemplates
     * const triggerTemplate = await prisma.triggerTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TriggerTemplateUpdateManyArgs>(args: SelectSubset<T, TriggerTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TriggerTemplate.
     * @param {TriggerTemplateUpsertArgs} args - Arguments to update or create a TriggerTemplate.
     * @example
     * // Update or create a TriggerTemplate
     * const triggerTemplate = await prisma.triggerTemplate.upsert({
     *   create: {
     *     // ... data to create a TriggerTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TriggerTemplate we want to update
     *   }
     * })
     */
    upsert<T extends TriggerTemplateUpsertArgs>(args: SelectSubset<T, TriggerTemplateUpsertArgs<ExtArgs>>): Prisma__TriggerTemplateClient<$Result.GetResult<Prisma.$TriggerTemplatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TriggerTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerTemplateCountArgs} args - Arguments to filter TriggerTemplates to count.
     * @example
     * // Count the number of TriggerTemplates
     * const count = await prisma.triggerTemplate.count({
     *   where: {
     *     // ... the filter for the TriggerTemplates we want to count
     *   }
     * })
    **/
    count<T extends TriggerTemplateCountArgs>(
      args?: Subset<T, TriggerTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TriggerTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TriggerTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TriggerTemplateAggregateArgs>(args: Subset<T, TriggerTemplateAggregateArgs>): Prisma.PrismaPromise<GetTriggerTemplateAggregateType<T>>

    /**
     * Group by TriggerTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TriggerTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TriggerTemplateGroupByArgs['orderBy'] }
        : { orderBy?: TriggerTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TriggerTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTriggerTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TriggerTemplate model
   */
  readonly fields: TriggerTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TriggerTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TriggerTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    triggers<T extends TriggerTemplate$triggersArgs<ExtArgs> = {}>(args?: Subset<T, TriggerTemplate$triggersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TriggerTemplate model
   */ 
  interface TriggerTemplateFieldRefs {
    readonly id: FieldRef<"TriggerTemplate", 'Int'>
    readonly name: FieldRef<"TriggerTemplate", 'String'>
    readonly provider: FieldRef<"TriggerTemplate", 'String'>
    readonly type: FieldRef<"TriggerTemplate", 'String'>
    readonly trigFunc: FieldRef<"TriggerTemplate", 'String'>
    readonly valueTemplate: FieldRef<"TriggerTemplate", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * TriggerTemplate findUnique
   */
  export type TriggerTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriggerTemplate
     */
    select?: TriggerTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerTemplateInclude<ExtArgs> | null
    /**
     * Filter, which TriggerTemplate to fetch.
     */
    where: TriggerTemplateWhereUniqueInput
  }

  /**
   * TriggerTemplate findUniqueOrThrow
   */
  export type TriggerTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriggerTemplate
     */
    select?: TriggerTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerTemplateInclude<ExtArgs> | null
    /**
     * Filter, which TriggerTemplate to fetch.
     */
    where: TriggerTemplateWhereUniqueInput
  }

  /**
   * TriggerTemplate findFirst
   */
  export type TriggerTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriggerTemplate
     */
    select?: TriggerTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerTemplateInclude<ExtArgs> | null
    /**
     * Filter, which TriggerTemplate to fetch.
     */
    where?: TriggerTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriggerTemplates to fetch.
     */
    orderBy?: TriggerTemplateOrderByWithRelationInput | TriggerTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriggerTemplates.
     */
    cursor?: TriggerTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriggerTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriggerTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriggerTemplates.
     */
    distinct?: TriggerTemplateScalarFieldEnum | TriggerTemplateScalarFieldEnum[]
  }

  /**
   * TriggerTemplate findFirstOrThrow
   */
  export type TriggerTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriggerTemplate
     */
    select?: TriggerTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerTemplateInclude<ExtArgs> | null
    /**
     * Filter, which TriggerTemplate to fetch.
     */
    where?: TriggerTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriggerTemplates to fetch.
     */
    orderBy?: TriggerTemplateOrderByWithRelationInput | TriggerTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriggerTemplates.
     */
    cursor?: TriggerTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriggerTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriggerTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriggerTemplates.
     */
    distinct?: TriggerTemplateScalarFieldEnum | TriggerTemplateScalarFieldEnum[]
  }

  /**
   * TriggerTemplate findMany
   */
  export type TriggerTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriggerTemplate
     */
    select?: TriggerTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerTemplateInclude<ExtArgs> | null
    /**
     * Filter, which TriggerTemplates to fetch.
     */
    where?: TriggerTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriggerTemplates to fetch.
     */
    orderBy?: TriggerTemplateOrderByWithRelationInput | TriggerTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TriggerTemplates.
     */
    cursor?: TriggerTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriggerTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriggerTemplates.
     */
    skip?: number
    distinct?: TriggerTemplateScalarFieldEnum | TriggerTemplateScalarFieldEnum[]
  }

  /**
   * TriggerTemplate create
   */
  export type TriggerTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriggerTemplate
     */
    select?: TriggerTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a TriggerTemplate.
     */
    data: XOR<TriggerTemplateCreateInput, TriggerTemplateUncheckedCreateInput>
  }

  /**
   * TriggerTemplate createMany
   */
  export type TriggerTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TriggerTemplates.
     */
    data: TriggerTemplateCreateManyInput | TriggerTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TriggerTemplate createManyAndReturn
   */
  export type TriggerTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriggerTemplate
     */
    select?: TriggerTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TriggerTemplates.
     */
    data: TriggerTemplateCreateManyInput | TriggerTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TriggerTemplate update
   */
  export type TriggerTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriggerTemplate
     */
    select?: TriggerTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a TriggerTemplate.
     */
    data: XOR<TriggerTemplateUpdateInput, TriggerTemplateUncheckedUpdateInput>
    /**
     * Choose, which TriggerTemplate to update.
     */
    where: TriggerTemplateWhereUniqueInput
  }

  /**
   * TriggerTemplate updateMany
   */
  export type TriggerTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TriggerTemplates.
     */
    data: XOR<TriggerTemplateUpdateManyMutationInput, TriggerTemplateUncheckedUpdateManyInput>
    /**
     * Filter which TriggerTemplates to update
     */
    where?: TriggerTemplateWhereInput
  }

  /**
   * TriggerTemplate upsert
   */
  export type TriggerTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriggerTemplate
     */
    select?: TriggerTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the TriggerTemplate to update in case it exists.
     */
    where: TriggerTemplateWhereUniqueInput
    /**
     * In case the TriggerTemplate found by the `where` argument doesn't exist, create a new TriggerTemplate with this data.
     */
    create: XOR<TriggerTemplateCreateInput, TriggerTemplateUncheckedCreateInput>
    /**
     * In case the TriggerTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TriggerTemplateUpdateInput, TriggerTemplateUncheckedUpdateInput>
  }

  /**
   * TriggerTemplate delete
   */
  export type TriggerTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriggerTemplate
     */
    select?: TriggerTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerTemplateInclude<ExtArgs> | null
    /**
     * Filter which TriggerTemplate to delete.
     */
    where: TriggerTemplateWhereUniqueInput
  }

  /**
   * TriggerTemplate deleteMany
   */
  export type TriggerTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TriggerTemplates to delete
     */
    where?: TriggerTemplateWhereInput
  }

  /**
   * TriggerTemplate.triggers
   */
  export type TriggerTemplate$triggersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    where?: TriggerWhereInput
    orderBy?: TriggerOrderByWithRelationInput | TriggerOrderByWithRelationInput[]
    cursor?: TriggerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TriggerScalarFieldEnum | TriggerScalarFieldEnum[]
  }

  /**
   * TriggerTemplate without action
   */
  export type TriggerTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriggerTemplate
     */
    select?: TriggerTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerTemplateInclude<ExtArgs> | null
  }


  /**
   * Model Trigger
   */

  export type AggregateTrigger = {
    _count: TriggerCountAggregateOutputType | null
    _avg: TriggerAvgAggregateOutputType | null
    _sum: TriggerSumAggregateOutputType | null
    _min: TriggerMinAggregateOutputType | null
    _max: TriggerMaxAggregateOutputType | null
  }

  export type TriggerAvgAggregateOutputType = {
    id: number | null
    triggerTemplateId: number | null
  }

  export type TriggerSumAggregateOutputType = {
    id: number | null
    triggerTemplateId: number | null
  }

  export type TriggerMinAggregateOutputType = {
    id: number | null
    triggerTemplateId: number | null
  }

  export type TriggerMaxAggregateOutputType = {
    id: number | null
    triggerTemplateId: number | null
  }

  export type TriggerCountAggregateOutputType = {
    id: number
    triggerValue: number
    triggerTemplateId: number
    _all: number
  }


  export type TriggerAvgAggregateInputType = {
    id?: true
    triggerTemplateId?: true
  }

  export type TriggerSumAggregateInputType = {
    id?: true
    triggerTemplateId?: true
  }

  export type TriggerMinAggregateInputType = {
    id?: true
    triggerTemplateId?: true
  }

  export type TriggerMaxAggregateInputType = {
    id?: true
    triggerTemplateId?: true
  }

  export type TriggerCountAggregateInputType = {
    id?: true
    triggerValue?: true
    triggerTemplateId?: true
    _all?: true
  }

  export type TriggerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trigger to aggregate.
     */
    where?: TriggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Triggers to fetch.
     */
    orderBy?: TriggerOrderByWithRelationInput | TriggerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TriggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Triggers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Triggers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Triggers
    **/
    _count?: true | TriggerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TriggerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TriggerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TriggerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TriggerMaxAggregateInputType
  }

  export type GetTriggerAggregateType<T extends TriggerAggregateArgs> = {
        [P in keyof T & keyof AggregateTrigger]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrigger[P]>
      : GetScalarType<T[P], AggregateTrigger[P]>
  }




  export type TriggerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TriggerWhereInput
    orderBy?: TriggerOrderByWithAggregationInput | TriggerOrderByWithAggregationInput[]
    by: TriggerScalarFieldEnum[] | TriggerScalarFieldEnum
    having?: TriggerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TriggerCountAggregateInputType | true
    _avg?: TriggerAvgAggregateInputType
    _sum?: TriggerSumAggregateInputType
    _min?: TriggerMinAggregateInputType
    _max?: TriggerMaxAggregateInputType
  }

  export type TriggerGroupByOutputType = {
    id: number
    triggerValue: JsonValue
    triggerTemplateId: number
    _count: TriggerCountAggregateOutputType | null
    _avg: TriggerAvgAggregateOutputType | null
    _sum: TriggerSumAggregateOutputType | null
    _min: TriggerMinAggregateOutputType | null
    _max: TriggerMaxAggregateOutputType | null
  }

  type GetTriggerGroupByPayload<T extends TriggerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TriggerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TriggerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TriggerGroupByOutputType[P]>
            : GetScalarType<T[P], TriggerGroupByOutputType[P]>
        }
      >
    >


  export type TriggerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    triggerValue?: boolean
    triggerTemplateId?: boolean
    triggerTemplate?: boolean | TriggerTemplateDefaultArgs<ExtArgs>
    plums?: boolean | Trigger$plumsArgs<ExtArgs>
    _count?: boolean | TriggerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trigger"]>

  export type TriggerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    triggerValue?: boolean
    triggerTemplateId?: boolean
    triggerTemplate?: boolean | TriggerTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trigger"]>

  export type TriggerSelectScalar = {
    id?: boolean
    triggerValue?: boolean
    triggerTemplateId?: boolean
  }

  export type TriggerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    triggerTemplate?: boolean | TriggerTemplateDefaultArgs<ExtArgs>
    plums?: boolean | Trigger$plumsArgs<ExtArgs>
    _count?: boolean | TriggerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TriggerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    triggerTemplate?: boolean | TriggerTemplateDefaultArgs<ExtArgs>
  }

  export type $TriggerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Trigger"
    objects: {
      triggerTemplate: Prisma.$TriggerTemplatePayload<ExtArgs>
      plums: Prisma.$PlumPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      triggerValue: Prisma.JsonValue
      triggerTemplateId: number
    }, ExtArgs["result"]["trigger"]>
    composites: {}
  }

  type TriggerGetPayload<S extends boolean | null | undefined | TriggerDefaultArgs> = $Result.GetResult<Prisma.$TriggerPayload, S>

  type TriggerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TriggerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TriggerCountAggregateInputType | true
    }

  export interface TriggerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Trigger'], meta: { name: 'Trigger' } }
    /**
     * Find zero or one Trigger that matches the filter.
     * @param {TriggerFindUniqueArgs} args - Arguments to find a Trigger
     * @example
     * // Get one Trigger
     * const trigger = await prisma.trigger.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TriggerFindUniqueArgs>(args: SelectSubset<T, TriggerFindUniqueArgs<ExtArgs>>): Prisma__TriggerClient<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Trigger that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TriggerFindUniqueOrThrowArgs} args - Arguments to find a Trigger
     * @example
     * // Get one Trigger
     * const trigger = await prisma.trigger.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TriggerFindUniqueOrThrowArgs>(args: SelectSubset<T, TriggerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TriggerClient<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Trigger that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerFindFirstArgs} args - Arguments to find a Trigger
     * @example
     * // Get one Trigger
     * const trigger = await prisma.trigger.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TriggerFindFirstArgs>(args?: SelectSubset<T, TriggerFindFirstArgs<ExtArgs>>): Prisma__TriggerClient<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Trigger that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerFindFirstOrThrowArgs} args - Arguments to find a Trigger
     * @example
     * // Get one Trigger
     * const trigger = await prisma.trigger.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TriggerFindFirstOrThrowArgs>(args?: SelectSubset<T, TriggerFindFirstOrThrowArgs<ExtArgs>>): Prisma__TriggerClient<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Triggers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Triggers
     * const triggers = await prisma.trigger.findMany()
     * 
     * // Get first 10 Triggers
     * const triggers = await prisma.trigger.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const triggerWithIdOnly = await prisma.trigger.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TriggerFindManyArgs>(args?: SelectSubset<T, TriggerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Trigger.
     * @param {TriggerCreateArgs} args - Arguments to create a Trigger.
     * @example
     * // Create one Trigger
     * const Trigger = await prisma.trigger.create({
     *   data: {
     *     // ... data to create a Trigger
     *   }
     * })
     * 
     */
    create<T extends TriggerCreateArgs>(args: SelectSubset<T, TriggerCreateArgs<ExtArgs>>): Prisma__TriggerClient<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Triggers.
     * @param {TriggerCreateManyArgs} args - Arguments to create many Triggers.
     * @example
     * // Create many Triggers
     * const trigger = await prisma.trigger.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TriggerCreateManyArgs>(args?: SelectSubset<T, TriggerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Triggers and returns the data saved in the database.
     * @param {TriggerCreateManyAndReturnArgs} args - Arguments to create many Triggers.
     * @example
     * // Create many Triggers
     * const trigger = await prisma.trigger.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Triggers and only return the `id`
     * const triggerWithIdOnly = await prisma.trigger.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TriggerCreateManyAndReturnArgs>(args?: SelectSubset<T, TriggerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Trigger.
     * @param {TriggerDeleteArgs} args - Arguments to delete one Trigger.
     * @example
     * // Delete one Trigger
     * const Trigger = await prisma.trigger.delete({
     *   where: {
     *     // ... filter to delete one Trigger
     *   }
     * })
     * 
     */
    delete<T extends TriggerDeleteArgs>(args: SelectSubset<T, TriggerDeleteArgs<ExtArgs>>): Prisma__TriggerClient<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Trigger.
     * @param {TriggerUpdateArgs} args - Arguments to update one Trigger.
     * @example
     * // Update one Trigger
     * const trigger = await prisma.trigger.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TriggerUpdateArgs>(args: SelectSubset<T, TriggerUpdateArgs<ExtArgs>>): Prisma__TriggerClient<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Triggers.
     * @param {TriggerDeleteManyArgs} args - Arguments to filter Triggers to delete.
     * @example
     * // Delete a few Triggers
     * const { count } = await prisma.trigger.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TriggerDeleteManyArgs>(args?: SelectSubset<T, TriggerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Triggers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Triggers
     * const trigger = await prisma.trigger.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TriggerUpdateManyArgs>(args: SelectSubset<T, TriggerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Trigger.
     * @param {TriggerUpsertArgs} args - Arguments to update or create a Trigger.
     * @example
     * // Update or create a Trigger
     * const trigger = await prisma.trigger.upsert({
     *   create: {
     *     // ... data to create a Trigger
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trigger we want to update
     *   }
     * })
     */
    upsert<T extends TriggerUpsertArgs>(args: SelectSubset<T, TriggerUpsertArgs<ExtArgs>>): Prisma__TriggerClient<$Result.GetResult<Prisma.$TriggerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Triggers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerCountArgs} args - Arguments to filter Triggers to count.
     * @example
     * // Count the number of Triggers
     * const count = await prisma.trigger.count({
     *   where: {
     *     // ... the filter for the Triggers we want to count
     *   }
     * })
    **/
    count<T extends TriggerCountArgs>(
      args?: Subset<T, TriggerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TriggerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trigger.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TriggerAggregateArgs>(args: Subset<T, TriggerAggregateArgs>): Prisma.PrismaPromise<GetTriggerAggregateType<T>>

    /**
     * Group by Trigger.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriggerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TriggerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TriggerGroupByArgs['orderBy'] }
        : { orderBy?: TriggerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TriggerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTriggerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Trigger model
   */
  readonly fields: TriggerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Trigger.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TriggerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    triggerTemplate<T extends TriggerTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TriggerTemplateDefaultArgs<ExtArgs>>): Prisma__TriggerTemplateClient<$Result.GetResult<Prisma.$TriggerTemplatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    plums<T extends Trigger$plumsArgs<ExtArgs> = {}>(args?: Subset<T, Trigger$plumsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlumPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Trigger model
   */ 
  interface TriggerFieldRefs {
    readonly id: FieldRef<"Trigger", 'Int'>
    readonly triggerValue: FieldRef<"Trigger", 'Json'>
    readonly triggerTemplateId: FieldRef<"Trigger", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Trigger findUnique
   */
  export type TriggerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * Filter, which Trigger to fetch.
     */
    where: TriggerWhereUniqueInput
  }

  /**
   * Trigger findUniqueOrThrow
   */
  export type TriggerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * Filter, which Trigger to fetch.
     */
    where: TriggerWhereUniqueInput
  }

  /**
   * Trigger findFirst
   */
  export type TriggerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * Filter, which Trigger to fetch.
     */
    where?: TriggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Triggers to fetch.
     */
    orderBy?: TriggerOrderByWithRelationInput | TriggerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Triggers.
     */
    cursor?: TriggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Triggers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Triggers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Triggers.
     */
    distinct?: TriggerScalarFieldEnum | TriggerScalarFieldEnum[]
  }

  /**
   * Trigger findFirstOrThrow
   */
  export type TriggerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * Filter, which Trigger to fetch.
     */
    where?: TriggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Triggers to fetch.
     */
    orderBy?: TriggerOrderByWithRelationInput | TriggerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Triggers.
     */
    cursor?: TriggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Triggers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Triggers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Triggers.
     */
    distinct?: TriggerScalarFieldEnum | TriggerScalarFieldEnum[]
  }

  /**
   * Trigger findMany
   */
  export type TriggerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * Filter, which Triggers to fetch.
     */
    where?: TriggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Triggers to fetch.
     */
    orderBy?: TriggerOrderByWithRelationInput | TriggerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Triggers.
     */
    cursor?: TriggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Triggers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Triggers.
     */
    skip?: number
    distinct?: TriggerScalarFieldEnum | TriggerScalarFieldEnum[]
  }

  /**
   * Trigger create
   */
  export type TriggerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * The data needed to create a Trigger.
     */
    data: XOR<TriggerCreateInput, TriggerUncheckedCreateInput>
  }

  /**
   * Trigger createMany
   */
  export type TriggerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Triggers.
     */
    data: TriggerCreateManyInput | TriggerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Trigger createManyAndReturn
   */
  export type TriggerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Triggers.
     */
    data: TriggerCreateManyInput | TriggerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Trigger update
   */
  export type TriggerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * The data needed to update a Trigger.
     */
    data: XOR<TriggerUpdateInput, TriggerUncheckedUpdateInput>
    /**
     * Choose, which Trigger to update.
     */
    where: TriggerWhereUniqueInput
  }

  /**
   * Trigger updateMany
   */
  export type TriggerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Triggers.
     */
    data: XOR<TriggerUpdateManyMutationInput, TriggerUncheckedUpdateManyInput>
    /**
     * Filter which Triggers to update
     */
    where?: TriggerWhereInput
  }

  /**
   * Trigger upsert
   */
  export type TriggerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * The filter to search for the Trigger to update in case it exists.
     */
    where: TriggerWhereUniqueInput
    /**
     * In case the Trigger found by the `where` argument doesn't exist, create a new Trigger with this data.
     */
    create: XOR<TriggerCreateInput, TriggerUncheckedCreateInput>
    /**
     * In case the Trigger was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TriggerUpdateInput, TriggerUncheckedUpdateInput>
  }

  /**
   * Trigger delete
   */
  export type TriggerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
    /**
     * Filter which Trigger to delete.
     */
    where: TriggerWhereUniqueInput
  }

  /**
   * Trigger deleteMany
   */
  export type TriggerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Triggers to delete
     */
    where?: TriggerWhereInput
  }

  /**
   * Trigger.plums
   */
  export type Trigger$plumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plum
     */
    select?: PlumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlumInclude<ExtArgs> | null
    where?: PlumWhereInput
    orderBy?: PlumOrderByWithRelationInput | PlumOrderByWithRelationInput[]
    cursor?: PlumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlumScalarFieldEnum | PlumScalarFieldEnum[]
  }

  /**
   * Trigger without action
   */
  export type TriggerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trigger
     */
    select?: TriggerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriggerInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    userId: 'userId',
    username: 'username',
    hashedPassword: 'hashedPassword',
    mail: 'mail'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TokenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    provider: 'provider',
    tokenHashed: 'tokenHashed',
    scope: 'scope',
    creationDate: 'creationDate'
  };

  export type TokenScalarFieldEnum = (typeof TokenScalarFieldEnum)[keyof typeof TokenScalarFieldEnum]


  export const PlumScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    actionId: 'actionId',
    triggerId: 'triggerId'
  };

  export type PlumScalarFieldEnum = (typeof PlumScalarFieldEnum)[keyof typeof PlumScalarFieldEnum]


  export const ActionTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    actFunc: 'actFunc',
    valueTemplate: 'valueTemplate'
  };

  export type ActionTemplateScalarFieldEnum = (typeof ActionTemplateScalarFieldEnum)[keyof typeof ActionTemplateScalarFieldEnum]


  export const ActionScalarFieldEnum: {
    id: 'id',
    actionValue: 'actionValue',
    actionTemplateId: 'actionTemplateId'
  };

  export type ActionScalarFieldEnum = (typeof ActionScalarFieldEnum)[keyof typeof ActionScalarFieldEnum]


  export const TriggerTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    provider: 'provider',
    type: 'type',
    trigFunc: 'trigFunc',
    valueTemplate: 'valueTemplate'
  };

  export type TriggerTemplateScalarFieldEnum = (typeof TriggerTemplateScalarFieldEnum)[keyof typeof TriggerTemplateScalarFieldEnum]


  export const TriggerScalarFieldEnum: {
    id: 'id',
    triggerValue: 'triggerValue',
    triggerTemplateId: 'triggerTemplateId'
  };

  export type TriggerScalarFieldEnum = (typeof TriggerScalarFieldEnum)[keyof typeof TriggerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    userId?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    hashedPassword?: StringFilter<"User"> | string
    mail?: StringFilter<"User"> | string
    tokens?: TokenListRelationFilter
    plums?: PlumListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    userId?: SortOrder
    username?: SortOrder
    hashedPassword?: SortOrder
    mail?: SortOrder
    tokens?: TokenOrderByRelationAggregateInput
    plums?: PlumOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    mail?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    username?: StringFilter<"User"> | string
    hashedPassword?: StringFilter<"User"> | string
    tokens?: TokenListRelationFilter
    plums?: PlumListRelationFilter
  }, "userId" | "mail">

  export type UserOrderByWithAggregationInput = {
    userId?: SortOrder
    username?: SortOrder
    hashedPassword?: SortOrder
    mail?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    hashedPassword?: StringWithAggregatesFilter<"User"> | string
    mail?: StringWithAggregatesFilter<"User"> | string
  }

  export type TokenWhereInput = {
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    id?: IntFilter<"Token"> | number
    userId?: IntFilter<"Token"> | number
    provider?: StringFilter<"Token"> | string
    tokenHashed?: StringFilter<"Token"> | string
    scope?: IntFilter<"Token"> | number
    creationDate?: StringFilter<"Token"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TokenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    tokenHashed?: SortOrder
    scope?: SortOrder
    creationDate?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TokenWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    userId?: IntFilter<"Token"> | number
    provider?: StringFilter<"Token"> | string
    tokenHashed?: StringFilter<"Token"> | string
    scope?: IntFilter<"Token"> | number
    creationDate?: StringFilter<"Token"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type TokenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    tokenHashed?: SortOrder
    scope?: SortOrder
    creationDate?: SortOrder
    _count?: TokenCountOrderByAggregateInput
    _avg?: TokenAvgOrderByAggregateInput
    _max?: TokenMaxOrderByAggregateInput
    _min?: TokenMinOrderByAggregateInput
    _sum?: TokenSumOrderByAggregateInput
  }

  export type TokenScalarWhereWithAggregatesInput = {
    AND?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    OR?: TokenScalarWhereWithAggregatesInput[]
    NOT?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Token"> | number
    userId?: IntWithAggregatesFilter<"Token"> | number
    provider?: StringWithAggregatesFilter<"Token"> | string
    tokenHashed?: StringWithAggregatesFilter<"Token"> | string
    scope?: IntWithAggregatesFilter<"Token"> | number
    creationDate?: StringWithAggregatesFilter<"Token"> | string
  }

  export type PlumWhereInput = {
    AND?: PlumWhereInput | PlumWhereInput[]
    OR?: PlumWhereInput[]
    NOT?: PlumWhereInput | PlumWhereInput[]
    id?: IntFilter<"Plum"> | number
    userId?: IntFilter<"Plum"> | number
    actionId?: IntFilter<"Plum"> | number
    triggerId?: IntFilter<"Plum"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    action?: XOR<ActionScalarRelationFilter, ActionWhereInput>
    trigger?: XOR<TriggerScalarRelationFilter, TriggerWhereInput>
  }

  export type PlumOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    actionId?: SortOrder
    triggerId?: SortOrder
    user?: UserOrderByWithRelationInput
    action?: ActionOrderByWithRelationInput
    trigger?: TriggerOrderByWithRelationInput
  }

  export type PlumWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlumWhereInput | PlumWhereInput[]
    OR?: PlumWhereInput[]
    NOT?: PlumWhereInput | PlumWhereInput[]
    userId?: IntFilter<"Plum"> | number
    actionId?: IntFilter<"Plum"> | number
    triggerId?: IntFilter<"Plum"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    action?: XOR<ActionScalarRelationFilter, ActionWhereInput>
    trigger?: XOR<TriggerScalarRelationFilter, TriggerWhereInput>
  }, "id">

  export type PlumOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    actionId?: SortOrder
    triggerId?: SortOrder
    _count?: PlumCountOrderByAggregateInput
    _avg?: PlumAvgOrderByAggregateInput
    _max?: PlumMaxOrderByAggregateInput
    _min?: PlumMinOrderByAggregateInput
    _sum?: PlumSumOrderByAggregateInput
  }

  export type PlumScalarWhereWithAggregatesInput = {
    AND?: PlumScalarWhereWithAggregatesInput | PlumScalarWhereWithAggregatesInput[]
    OR?: PlumScalarWhereWithAggregatesInput[]
    NOT?: PlumScalarWhereWithAggregatesInput | PlumScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Plum"> | number
    userId?: IntWithAggregatesFilter<"Plum"> | number
    actionId?: IntWithAggregatesFilter<"Plum"> | number
    triggerId?: IntWithAggregatesFilter<"Plum"> | number
  }

  export type ActionTemplateWhereInput = {
    AND?: ActionTemplateWhereInput | ActionTemplateWhereInput[]
    OR?: ActionTemplateWhereInput[]
    NOT?: ActionTemplateWhereInput | ActionTemplateWhereInput[]
    id?: IntFilter<"ActionTemplate"> | number
    name?: StringFilter<"ActionTemplate"> | string
    actFunc?: StringFilter<"ActionTemplate"> | string
    valueTemplate?: JsonFilter<"ActionTemplate">
    actions?: ActionListRelationFilter
  }

  export type ActionTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    actFunc?: SortOrder
    valueTemplate?: SortOrder
    actions?: ActionOrderByRelationAggregateInput
  }

  export type ActionTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ActionTemplateWhereInput | ActionTemplateWhereInput[]
    OR?: ActionTemplateWhereInput[]
    NOT?: ActionTemplateWhereInput | ActionTemplateWhereInput[]
    name?: StringFilter<"ActionTemplate"> | string
    actFunc?: StringFilter<"ActionTemplate"> | string
    valueTemplate?: JsonFilter<"ActionTemplate">
    actions?: ActionListRelationFilter
  }, "id">

  export type ActionTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    actFunc?: SortOrder
    valueTemplate?: SortOrder
    _count?: ActionTemplateCountOrderByAggregateInput
    _avg?: ActionTemplateAvgOrderByAggregateInput
    _max?: ActionTemplateMaxOrderByAggregateInput
    _min?: ActionTemplateMinOrderByAggregateInput
    _sum?: ActionTemplateSumOrderByAggregateInput
  }

  export type ActionTemplateScalarWhereWithAggregatesInput = {
    AND?: ActionTemplateScalarWhereWithAggregatesInput | ActionTemplateScalarWhereWithAggregatesInput[]
    OR?: ActionTemplateScalarWhereWithAggregatesInput[]
    NOT?: ActionTemplateScalarWhereWithAggregatesInput | ActionTemplateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ActionTemplate"> | number
    name?: StringWithAggregatesFilter<"ActionTemplate"> | string
    actFunc?: StringWithAggregatesFilter<"ActionTemplate"> | string
    valueTemplate?: JsonWithAggregatesFilter<"ActionTemplate">
  }

  export type ActionWhereInput = {
    AND?: ActionWhereInput | ActionWhereInput[]
    OR?: ActionWhereInput[]
    NOT?: ActionWhereInput | ActionWhereInput[]
    id?: IntFilter<"Action"> | number
    actionValue?: JsonFilter<"Action">
    actionTemplateId?: IntFilter<"Action"> | number
    actionTemplate?: XOR<ActionTemplateScalarRelationFilter, ActionTemplateWhereInput>
    plums?: PlumListRelationFilter
  }

  export type ActionOrderByWithRelationInput = {
    id?: SortOrder
    actionValue?: SortOrder
    actionTemplateId?: SortOrder
    actionTemplate?: ActionTemplateOrderByWithRelationInput
    plums?: PlumOrderByRelationAggregateInput
  }

  export type ActionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ActionWhereInput | ActionWhereInput[]
    OR?: ActionWhereInput[]
    NOT?: ActionWhereInput | ActionWhereInput[]
    actionValue?: JsonFilter<"Action">
    actionTemplateId?: IntFilter<"Action"> | number
    actionTemplate?: XOR<ActionTemplateScalarRelationFilter, ActionTemplateWhereInput>
    plums?: PlumListRelationFilter
  }, "id">

  export type ActionOrderByWithAggregationInput = {
    id?: SortOrder
    actionValue?: SortOrder
    actionTemplateId?: SortOrder
    _count?: ActionCountOrderByAggregateInput
    _avg?: ActionAvgOrderByAggregateInput
    _max?: ActionMaxOrderByAggregateInput
    _min?: ActionMinOrderByAggregateInput
    _sum?: ActionSumOrderByAggregateInput
  }

  export type ActionScalarWhereWithAggregatesInput = {
    AND?: ActionScalarWhereWithAggregatesInput | ActionScalarWhereWithAggregatesInput[]
    OR?: ActionScalarWhereWithAggregatesInput[]
    NOT?: ActionScalarWhereWithAggregatesInput | ActionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Action"> | number
    actionValue?: JsonWithAggregatesFilter<"Action">
    actionTemplateId?: IntWithAggregatesFilter<"Action"> | number
  }

  export type TriggerTemplateWhereInput = {
    AND?: TriggerTemplateWhereInput | TriggerTemplateWhereInput[]
    OR?: TriggerTemplateWhereInput[]
    NOT?: TriggerTemplateWhereInput | TriggerTemplateWhereInput[]
    id?: IntFilter<"TriggerTemplate"> | number
    name?: StringFilter<"TriggerTemplate"> | string
    provider?: StringFilter<"TriggerTemplate"> | string
    type?: StringFilter<"TriggerTemplate"> | string
    trigFunc?: StringFilter<"TriggerTemplate"> | string
    valueTemplate?: JsonFilter<"TriggerTemplate">
    triggers?: TriggerListRelationFilter
  }

  export type TriggerTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    type?: SortOrder
    trigFunc?: SortOrder
    valueTemplate?: SortOrder
    triggers?: TriggerOrderByRelationAggregateInput
  }

  export type TriggerTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TriggerTemplateWhereInput | TriggerTemplateWhereInput[]
    OR?: TriggerTemplateWhereInput[]
    NOT?: TriggerTemplateWhereInput | TriggerTemplateWhereInput[]
    name?: StringFilter<"TriggerTemplate"> | string
    provider?: StringFilter<"TriggerTemplate"> | string
    type?: StringFilter<"TriggerTemplate"> | string
    trigFunc?: StringFilter<"TriggerTemplate"> | string
    valueTemplate?: JsonFilter<"TriggerTemplate">
    triggers?: TriggerListRelationFilter
  }, "id">

  export type TriggerTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    type?: SortOrder
    trigFunc?: SortOrder
    valueTemplate?: SortOrder
    _count?: TriggerTemplateCountOrderByAggregateInput
    _avg?: TriggerTemplateAvgOrderByAggregateInput
    _max?: TriggerTemplateMaxOrderByAggregateInput
    _min?: TriggerTemplateMinOrderByAggregateInput
    _sum?: TriggerTemplateSumOrderByAggregateInput
  }

  export type TriggerTemplateScalarWhereWithAggregatesInput = {
    AND?: TriggerTemplateScalarWhereWithAggregatesInput | TriggerTemplateScalarWhereWithAggregatesInput[]
    OR?: TriggerTemplateScalarWhereWithAggregatesInput[]
    NOT?: TriggerTemplateScalarWhereWithAggregatesInput | TriggerTemplateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TriggerTemplate"> | number
    name?: StringWithAggregatesFilter<"TriggerTemplate"> | string
    provider?: StringWithAggregatesFilter<"TriggerTemplate"> | string
    type?: StringWithAggregatesFilter<"TriggerTemplate"> | string
    trigFunc?: StringWithAggregatesFilter<"TriggerTemplate"> | string
    valueTemplate?: JsonWithAggregatesFilter<"TriggerTemplate">
  }

  export type TriggerWhereInput = {
    AND?: TriggerWhereInput | TriggerWhereInput[]
    OR?: TriggerWhereInput[]
    NOT?: TriggerWhereInput | TriggerWhereInput[]
    id?: IntFilter<"Trigger"> | number
    triggerValue?: JsonFilter<"Trigger">
    triggerTemplateId?: IntFilter<"Trigger"> | number
    triggerTemplate?: XOR<TriggerTemplateScalarRelationFilter, TriggerTemplateWhereInput>
    plums?: PlumListRelationFilter
  }

  export type TriggerOrderByWithRelationInput = {
    id?: SortOrder
    triggerValue?: SortOrder
    triggerTemplateId?: SortOrder
    triggerTemplate?: TriggerTemplateOrderByWithRelationInput
    plums?: PlumOrderByRelationAggregateInput
  }

  export type TriggerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TriggerWhereInput | TriggerWhereInput[]
    OR?: TriggerWhereInput[]
    NOT?: TriggerWhereInput | TriggerWhereInput[]
    triggerValue?: JsonFilter<"Trigger">
    triggerTemplateId?: IntFilter<"Trigger"> | number
    triggerTemplate?: XOR<TriggerTemplateScalarRelationFilter, TriggerTemplateWhereInput>
    plums?: PlumListRelationFilter
  }, "id">

  export type TriggerOrderByWithAggregationInput = {
    id?: SortOrder
    triggerValue?: SortOrder
    triggerTemplateId?: SortOrder
    _count?: TriggerCountOrderByAggregateInput
    _avg?: TriggerAvgOrderByAggregateInput
    _max?: TriggerMaxOrderByAggregateInput
    _min?: TriggerMinOrderByAggregateInput
    _sum?: TriggerSumOrderByAggregateInput
  }

  export type TriggerScalarWhereWithAggregatesInput = {
    AND?: TriggerScalarWhereWithAggregatesInput | TriggerScalarWhereWithAggregatesInput[]
    OR?: TriggerScalarWhereWithAggregatesInput[]
    NOT?: TriggerScalarWhereWithAggregatesInput | TriggerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Trigger"> | number
    triggerValue?: JsonWithAggregatesFilter<"Trigger">
    triggerTemplateId?: IntWithAggregatesFilter<"Trigger"> | number
  }

  export type UserCreateInput = {
    username: string
    hashedPassword: string
    mail: string
    tokens?: TokenCreateNestedManyWithoutUserInput
    plums?: PlumCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    userId?: number
    username: string
    hashedPassword: string
    mail: string
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    plums?: PlumUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    tokens?: TokenUpdateManyWithoutUserNestedInput
    plums?: PlumUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    plums?: PlumUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    userId?: number
    username: string
    hashedPassword: string
    mail: string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
  }

  export type TokenCreateInput = {
    provider: string
    tokenHashed: string
    scope: number
    creationDate: string
    user: UserCreateNestedOneWithoutTokensInput
  }

  export type TokenUncheckedCreateInput = {
    id?: number
    userId: number
    provider: string
    tokenHashed: string
    scope: number
    creationDate: string
  }

  export type TokenUpdateInput = {
    provider?: StringFieldUpdateOperationsInput | string
    tokenHashed?: StringFieldUpdateOperationsInput | string
    scope?: IntFieldUpdateOperationsInput | number
    creationDate?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutTokensNestedInput
  }

  export type TokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    provider?: StringFieldUpdateOperationsInput | string
    tokenHashed?: StringFieldUpdateOperationsInput | string
    scope?: IntFieldUpdateOperationsInput | number
    creationDate?: StringFieldUpdateOperationsInput | string
  }

  export type TokenCreateManyInput = {
    id?: number
    userId: number
    provider: string
    tokenHashed: string
    scope: number
    creationDate: string
  }

  export type TokenUpdateManyMutationInput = {
    provider?: StringFieldUpdateOperationsInput | string
    tokenHashed?: StringFieldUpdateOperationsInput | string
    scope?: IntFieldUpdateOperationsInput | number
    creationDate?: StringFieldUpdateOperationsInput | string
  }

  export type TokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    provider?: StringFieldUpdateOperationsInput | string
    tokenHashed?: StringFieldUpdateOperationsInput | string
    scope?: IntFieldUpdateOperationsInput | number
    creationDate?: StringFieldUpdateOperationsInput | string
  }

  export type PlumCreateInput = {
    user: UserCreateNestedOneWithoutPlumsInput
    action: ActionCreateNestedOneWithoutPlumsInput
    trigger: TriggerCreateNestedOneWithoutPlumsInput
  }

  export type PlumUncheckedCreateInput = {
    id?: number
    userId: number
    actionId: number
    triggerId: number
  }

  export type PlumUpdateInput = {
    user?: UserUpdateOneRequiredWithoutPlumsNestedInput
    action?: ActionUpdateOneRequiredWithoutPlumsNestedInput
    trigger?: TriggerUpdateOneRequiredWithoutPlumsNestedInput
  }

  export type PlumUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    actionId?: IntFieldUpdateOperationsInput | number
    triggerId?: IntFieldUpdateOperationsInput | number
  }

  export type PlumCreateManyInput = {
    id?: number
    userId: number
    actionId: number
    triggerId: number
  }

  export type PlumUpdateManyMutationInput = {

  }

  export type PlumUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    actionId?: IntFieldUpdateOperationsInput | number
    triggerId?: IntFieldUpdateOperationsInput | number
  }

  export type ActionTemplateCreateInput = {
    name: string
    actFunc: string
    valueTemplate: JsonNullValueInput | InputJsonValue
    actions?: ActionCreateNestedManyWithoutActionTemplateInput
  }

  export type ActionTemplateUncheckedCreateInput = {
    id?: number
    name: string
    actFunc: string
    valueTemplate: JsonNullValueInput | InputJsonValue
    actions?: ActionUncheckedCreateNestedManyWithoutActionTemplateInput
  }

  export type ActionTemplateUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    actFunc?: StringFieldUpdateOperationsInput | string
    valueTemplate?: JsonNullValueInput | InputJsonValue
    actions?: ActionUpdateManyWithoutActionTemplateNestedInput
  }

  export type ActionTemplateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    actFunc?: StringFieldUpdateOperationsInput | string
    valueTemplate?: JsonNullValueInput | InputJsonValue
    actions?: ActionUncheckedUpdateManyWithoutActionTemplateNestedInput
  }

  export type ActionTemplateCreateManyInput = {
    id?: number
    name: string
    actFunc: string
    valueTemplate: JsonNullValueInput | InputJsonValue
  }

  export type ActionTemplateUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    actFunc?: StringFieldUpdateOperationsInput | string
    valueTemplate?: JsonNullValueInput | InputJsonValue
  }

  export type ActionTemplateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    actFunc?: StringFieldUpdateOperationsInput | string
    valueTemplate?: JsonNullValueInput | InputJsonValue
  }

  export type ActionCreateInput = {
    actionValue: JsonNullValueInput | InputJsonValue
    actionTemplate: ActionTemplateCreateNestedOneWithoutActionsInput
    plums?: PlumCreateNestedManyWithoutActionInput
  }

  export type ActionUncheckedCreateInput = {
    id?: number
    actionValue: JsonNullValueInput | InputJsonValue
    actionTemplateId: number
    plums?: PlumUncheckedCreateNestedManyWithoutActionInput
  }

  export type ActionUpdateInput = {
    actionValue?: JsonNullValueInput | InputJsonValue
    actionTemplate?: ActionTemplateUpdateOneRequiredWithoutActionsNestedInput
    plums?: PlumUpdateManyWithoutActionNestedInput
  }

  export type ActionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    actionValue?: JsonNullValueInput | InputJsonValue
    actionTemplateId?: IntFieldUpdateOperationsInput | number
    plums?: PlumUncheckedUpdateManyWithoutActionNestedInput
  }

  export type ActionCreateManyInput = {
    id?: number
    actionValue: JsonNullValueInput | InputJsonValue
    actionTemplateId: number
  }

  export type ActionUpdateManyMutationInput = {
    actionValue?: JsonNullValueInput | InputJsonValue
  }

  export type ActionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    actionValue?: JsonNullValueInput | InputJsonValue
    actionTemplateId?: IntFieldUpdateOperationsInput | number
  }

  export type TriggerTemplateCreateInput = {
    name: string
    provider: string
    type: string
    trigFunc: string
    valueTemplate: JsonNullValueInput | InputJsonValue
    triggers?: TriggerCreateNestedManyWithoutTriggerTemplateInput
  }

  export type TriggerTemplateUncheckedCreateInput = {
    id?: number
    name: string
    provider: string
    type: string
    trigFunc: string
    valueTemplate: JsonNullValueInput | InputJsonValue
    triggers?: TriggerUncheckedCreateNestedManyWithoutTriggerTemplateInput
  }

  export type TriggerTemplateUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    trigFunc?: StringFieldUpdateOperationsInput | string
    valueTemplate?: JsonNullValueInput | InputJsonValue
    triggers?: TriggerUpdateManyWithoutTriggerTemplateNestedInput
  }

  export type TriggerTemplateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    trigFunc?: StringFieldUpdateOperationsInput | string
    valueTemplate?: JsonNullValueInput | InputJsonValue
    triggers?: TriggerUncheckedUpdateManyWithoutTriggerTemplateNestedInput
  }

  export type TriggerTemplateCreateManyInput = {
    id?: number
    name: string
    provider: string
    type: string
    trigFunc: string
    valueTemplate: JsonNullValueInput | InputJsonValue
  }

  export type TriggerTemplateUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    trigFunc?: StringFieldUpdateOperationsInput | string
    valueTemplate?: JsonNullValueInput | InputJsonValue
  }

  export type TriggerTemplateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    trigFunc?: StringFieldUpdateOperationsInput | string
    valueTemplate?: JsonNullValueInput | InputJsonValue
  }

  export type TriggerCreateInput = {
    triggerValue: JsonNullValueInput | InputJsonValue
    triggerTemplate: TriggerTemplateCreateNestedOneWithoutTriggersInput
    plums?: PlumCreateNestedManyWithoutTriggerInput
  }

  export type TriggerUncheckedCreateInput = {
    id?: number
    triggerValue: JsonNullValueInput | InputJsonValue
    triggerTemplateId: number
    plums?: PlumUncheckedCreateNestedManyWithoutTriggerInput
  }

  export type TriggerUpdateInput = {
    triggerValue?: JsonNullValueInput | InputJsonValue
    triggerTemplate?: TriggerTemplateUpdateOneRequiredWithoutTriggersNestedInput
    plums?: PlumUpdateManyWithoutTriggerNestedInput
  }

  export type TriggerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    triggerValue?: JsonNullValueInput | InputJsonValue
    triggerTemplateId?: IntFieldUpdateOperationsInput | number
    plums?: PlumUncheckedUpdateManyWithoutTriggerNestedInput
  }

  export type TriggerCreateManyInput = {
    id?: number
    triggerValue: JsonNullValueInput | InputJsonValue
    triggerTemplateId: number
  }

  export type TriggerUpdateManyMutationInput = {
    triggerValue?: JsonNullValueInput | InputJsonValue
  }

  export type TriggerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    triggerValue?: JsonNullValueInput | InputJsonValue
    triggerTemplateId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type TokenListRelationFilter = {
    every?: TokenWhereInput
    some?: TokenWhereInput
    none?: TokenWhereInput
  }

  export type PlumListRelationFilter = {
    every?: PlumWhereInput
    some?: PlumWhereInput
    none?: PlumWhereInput
  }

  export type TokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlumOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    userId?: SortOrder
    username?: SortOrder
    hashedPassword?: SortOrder
    mail?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    userId?: SortOrder
    username?: SortOrder
    hashedPassword?: SortOrder
    mail?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    userId?: SortOrder
    username?: SortOrder
    hashedPassword?: SortOrder
    mail?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TokenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    tokenHashed?: SortOrder
    scope?: SortOrder
    creationDate?: SortOrder
  }

  export type TokenAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    scope?: SortOrder
  }

  export type TokenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    tokenHashed?: SortOrder
    scope?: SortOrder
    creationDate?: SortOrder
  }

  export type TokenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    tokenHashed?: SortOrder
    scope?: SortOrder
    creationDate?: SortOrder
  }

  export type TokenSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    scope?: SortOrder
  }

  export type ActionScalarRelationFilter = {
    is?: ActionWhereInput
    isNot?: ActionWhereInput
  }

  export type TriggerScalarRelationFilter = {
    is?: TriggerWhereInput
    isNot?: TriggerWhereInput
  }

  export type PlumCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    actionId?: SortOrder
    triggerId?: SortOrder
  }

  export type PlumAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    actionId?: SortOrder
    triggerId?: SortOrder
  }

  export type PlumMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    actionId?: SortOrder
    triggerId?: SortOrder
  }

  export type PlumMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    actionId?: SortOrder
    triggerId?: SortOrder
  }

  export type PlumSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    actionId?: SortOrder
    triggerId?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ActionListRelationFilter = {
    every?: ActionWhereInput
    some?: ActionWhereInput
    none?: ActionWhereInput
  }

  export type ActionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActionTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    actFunc?: SortOrder
    valueTemplate?: SortOrder
  }

  export type ActionTemplateAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ActionTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    actFunc?: SortOrder
  }

  export type ActionTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    actFunc?: SortOrder
  }

  export type ActionTemplateSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type ActionTemplateScalarRelationFilter = {
    is?: ActionTemplateWhereInput
    isNot?: ActionTemplateWhereInput
  }

  export type ActionCountOrderByAggregateInput = {
    id?: SortOrder
    actionValue?: SortOrder
    actionTemplateId?: SortOrder
  }

  export type ActionAvgOrderByAggregateInput = {
    id?: SortOrder
    actionTemplateId?: SortOrder
  }

  export type ActionMaxOrderByAggregateInput = {
    id?: SortOrder
    actionTemplateId?: SortOrder
  }

  export type ActionMinOrderByAggregateInput = {
    id?: SortOrder
    actionTemplateId?: SortOrder
  }

  export type ActionSumOrderByAggregateInput = {
    id?: SortOrder
    actionTemplateId?: SortOrder
  }

  export type TriggerListRelationFilter = {
    every?: TriggerWhereInput
    some?: TriggerWhereInput
    none?: TriggerWhereInput
  }

  export type TriggerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TriggerTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    type?: SortOrder
    trigFunc?: SortOrder
    valueTemplate?: SortOrder
  }

  export type TriggerTemplateAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TriggerTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    type?: SortOrder
    trigFunc?: SortOrder
  }

  export type TriggerTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    type?: SortOrder
    trigFunc?: SortOrder
  }

  export type TriggerTemplateSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TriggerTemplateScalarRelationFilter = {
    is?: TriggerTemplateWhereInput
    isNot?: TriggerTemplateWhereInput
  }

  export type TriggerCountOrderByAggregateInput = {
    id?: SortOrder
    triggerValue?: SortOrder
    triggerTemplateId?: SortOrder
  }

  export type TriggerAvgOrderByAggregateInput = {
    id?: SortOrder
    triggerTemplateId?: SortOrder
  }

  export type TriggerMaxOrderByAggregateInput = {
    id?: SortOrder
    triggerTemplateId?: SortOrder
  }

  export type TriggerMinOrderByAggregateInput = {
    id?: SortOrder
    triggerTemplateId?: SortOrder
  }

  export type TriggerSumOrderByAggregateInput = {
    id?: SortOrder
    triggerTemplateId?: SortOrder
  }

  export type TokenCreateNestedManyWithoutUserInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
  }

  export type PlumCreateNestedManyWithoutUserInput = {
    create?: XOR<PlumCreateWithoutUserInput, PlumUncheckedCreateWithoutUserInput> | PlumCreateWithoutUserInput[] | PlumUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlumCreateOrConnectWithoutUserInput | PlumCreateOrConnectWithoutUserInput[]
    createMany?: PlumCreateManyUserInputEnvelope
    connect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
  }

  export type TokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
  }

  export type PlumUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PlumCreateWithoutUserInput, PlumUncheckedCreateWithoutUserInput> | PlumCreateWithoutUserInput[] | PlumUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlumCreateOrConnectWithoutUserInput | PlumCreateOrConnectWithoutUserInput[]
    createMany?: PlumCreateManyUserInputEnvelope
    connect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type TokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    upsert?: TokenUpsertWithWhereUniqueWithoutUserInput | TokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    set?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    disconnect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    delete?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    update?: TokenUpdateWithWhereUniqueWithoutUserInput | TokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TokenUpdateManyWithWhereWithoutUserInput | TokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TokenScalarWhereInput | TokenScalarWhereInput[]
  }

  export type PlumUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlumCreateWithoutUserInput, PlumUncheckedCreateWithoutUserInput> | PlumCreateWithoutUserInput[] | PlumUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlumCreateOrConnectWithoutUserInput | PlumCreateOrConnectWithoutUserInput[]
    upsert?: PlumUpsertWithWhereUniqueWithoutUserInput | PlumUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlumCreateManyUserInputEnvelope
    set?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    disconnect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    delete?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    connect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    update?: PlumUpdateWithWhereUniqueWithoutUserInput | PlumUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlumUpdateManyWithWhereWithoutUserInput | PlumUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlumScalarWhereInput | PlumScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    upsert?: TokenUpsertWithWhereUniqueWithoutUserInput | TokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    set?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    disconnect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    delete?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    update?: TokenUpdateWithWhereUniqueWithoutUserInput | TokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TokenUpdateManyWithWhereWithoutUserInput | TokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TokenScalarWhereInput | TokenScalarWhereInput[]
  }

  export type PlumUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlumCreateWithoutUserInput, PlumUncheckedCreateWithoutUserInput> | PlumCreateWithoutUserInput[] | PlumUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlumCreateOrConnectWithoutUserInput | PlumCreateOrConnectWithoutUserInput[]
    upsert?: PlumUpsertWithWhereUniqueWithoutUserInput | PlumUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlumCreateManyUserInputEnvelope
    set?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    disconnect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    delete?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    connect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    update?: PlumUpdateWithWhereUniqueWithoutUserInput | PlumUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlumUpdateManyWithWhereWithoutUserInput | PlumUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlumScalarWhereInput | PlumScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTokensInput = {
    create?: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTokensNestedInput = {
    create?: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokensInput
    upsert?: UserUpsertWithoutTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTokensInput, UserUpdateWithoutTokensInput>, UserUncheckedUpdateWithoutTokensInput>
  }

  export type UserCreateNestedOneWithoutPlumsInput = {
    create?: XOR<UserCreateWithoutPlumsInput, UserUncheckedCreateWithoutPlumsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlumsInput
    connect?: UserWhereUniqueInput
  }

  export type ActionCreateNestedOneWithoutPlumsInput = {
    create?: XOR<ActionCreateWithoutPlumsInput, ActionUncheckedCreateWithoutPlumsInput>
    connectOrCreate?: ActionCreateOrConnectWithoutPlumsInput
    connect?: ActionWhereUniqueInput
  }

  export type TriggerCreateNestedOneWithoutPlumsInput = {
    create?: XOR<TriggerCreateWithoutPlumsInput, TriggerUncheckedCreateWithoutPlumsInput>
    connectOrCreate?: TriggerCreateOrConnectWithoutPlumsInput
    connect?: TriggerWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPlumsNestedInput = {
    create?: XOR<UserCreateWithoutPlumsInput, UserUncheckedCreateWithoutPlumsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlumsInput
    upsert?: UserUpsertWithoutPlumsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlumsInput, UserUpdateWithoutPlumsInput>, UserUncheckedUpdateWithoutPlumsInput>
  }

  export type ActionUpdateOneRequiredWithoutPlumsNestedInput = {
    create?: XOR<ActionCreateWithoutPlumsInput, ActionUncheckedCreateWithoutPlumsInput>
    connectOrCreate?: ActionCreateOrConnectWithoutPlumsInput
    upsert?: ActionUpsertWithoutPlumsInput
    connect?: ActionWhereUniqueInput
    update?: XOR<XOR<ActionUpdateToOneWithWhereWithoutPlumsInput, ActionUpdateWithoutPlumsInput>, ActionUncheckedUpdateWithoutPlumsInput>
  }

  export type TriggerUpdateOneRequiredWithoutPlumsNestedInput = {
    create?: XOR<TriggerCreateWithoutPlumsInput, TriggerUncheckedCreateWithoutPlumsInput>
    connectOrCreate?: TriggerCreateOrConnectWithoutPlumsInput
    upsert?: TriggerUpsertWithoutPlumsInput
    connect?: TriggerWhereUniqueInput
    update?: XOR<XOR<TriggerUpdateToOneWithWhereWithoutPlumsInput, TriggerUpdateWithoutPlumsInput>, TriggerUncheckedUpdateWithoutPlumsInput>
  }

  export type ActionCreateNestedManyWithoutActionTemplateInput = {
    create?: XOR<ActionCreateWithoutActionTemplateInput, ActionUncheckedCreateWithoutActionTemplateInput> | ActionCreateWithoutActionTemplateInput[] | ActionUncheckedCreateWithoutActionTemplateInput[]
    connectOrCreate?: ActionCreateOrConnectWithoutActionTemplateInput | ActionCreateOrConnectWithoutActionTemplateInput[]
    createMany?: ActionCreateManyActionTemplateInputEnvelope
    connect?: ActionWhereUniqueInput | ActionWhereUniqueInput[]
  }

  export type ActionUncheckedCreateNestedManyWithoutActionTemplateInput = {
    create?: XOR<ActionCreateWithoutActionTemplateInput, ActionUncheckedCreateWithoutActionTemplateInput> | ActionCreateWithoutActionTemplateInput[] | ActionUncheckedCreateWithoutActionTemplateInput[]
    connectOrCreate?: ActionCreateOrConnectWithoutActionTemplateInput | ActionCreateOrConnectWithoutActionTemplateInput[]
    createMany?: ActionCreateManyActionTemplateInputEnvelope
    connect?: ActionWhereUniqueInput | ActionWhereUniqueInput[]
  }

  export type ActionUpdateManyWithoutActionTemplateNestedInput = {
    create?: XOR<ActionCreateWithoutActionTemplateInput, ActionUncheckedCreateWithoutActionTemplateInput> | ActionCreateWithoutActionTemplateInput[] | ActionUncheckedCreateWithoutActionTemplateInput[]
    connectOrCreate?: ActionCreateOrConnectWithoutActionTemplateInput | ActionCreateOrConnectWithoutActionTemplateInput[]
    upsert?: ActionUpsertWithWhereUniqueWithoutActionTemplateInput | ActionUpsertWithWhereUniqueWithoutActionTemplateInput[]
    createMany?: ActionCreateManyActionTemplateInputEnvelope
    set?: ActionWhereUniqueInput | ActionWhereUniqueInput[]
    disconnect?: ActionWhereUniqueInput | ActionWhereUniqueInput[]
    delete?: ActionWhereUniqueInput | ActionWhereUniqueInput[]
    connect?: ActionWhereUniqueInput | ActionWhereUniqueInput[]
    update?: ActionUpdateWithWhereUniqueWithoutActionTemplateInput | ActionUpdateWithWhereUniqueWithoutActionTemplateInput[]
    updateMany?: ActionUpdateManyWithWhereWithoutActionTemplateInput | ActionUpdateManyWithWhereWithoutActionTemplateInput[]
    deleteMany?: ActionScalarWhereInput | ActionScalarWhereInput[]
  }

  export type ActionUncheckedUpdateManyWithoutActionTemplateNestedInput = {
    create?: XOR<ActionCreateWithoutActionTemplateInput, ActionUncheckedCreateWithoutActionTemplateInput> | ActionCreateWithoutActionTemplateInput[] | ActionUncheckedCreateWithoutActionTemplateInput[]
    connectOrCreate?: ActionCreateOrConnectWithoutActionTemplateInput | ActionCreateOrConnectWithoutActionTemplateInput[]
    upsert?: ActionUpsertWithWhereUniqueWithoutActionTemplateInput | ActionUpsertWithWhereUniqueWithoutActionTemplateInput[]
    createMany?: ActionCreateManyActionTemplateInputEnvelope
    set?: ActionWhereUniqueInput | ActionWhereUniqueInput[]
    disconnect?: ActionWhereUniqueInput | ActionWhereUniqueInput[]
    delete?: ActionWhereUniqueInput | ActionWhereUniqueInput[]
    connect?: ActionWhereUniqueInput | ActionWhereUniqueInput[]
    update?: ActionUpdateWithWhereUniqueWithoutActionTemplateInput | ActionUpdateWithWhereUniqueWithoutActionTemplateInput[]
    updateMany?: ActionUpdateManyWithWhereWithoutActionTemplateInput | ActionUpdateManyWithWhereWithoutActionTemplateInput[]
    deleteMany?: ActionScalarWhereInput | ActionScalarWhereInput[]
  }

  export type ActionTemplateCreateNestedOneWithoutActionsInput = {
    create?: XOR<ActionTemplateCreateWithoutActionsInput, ActionTemplateUncheckedCreateWithoutActionsInput>
    connectOrCreate?: ActionTemplateCreateOrConnectWithoutActionsInput
    connect?: ActionTemplateWhereUniqueInput
  }

  export type PlumCreateNestedManyWithoutActionInput = {
    create?: XOR<PlumCreateWithoutActionInput, PlumUncheckedCreateWithoutActionInput> | PlumCreateWithoutActionInput[] | PlumUncheckedCreateWithoutActionInput[]
    connectOrCreate?: PlumCreateOrConnectWithoutActionInput | PlumCreateOrConnectWithoutActionInput[]
    createMany?: PlumCreateManyActionInputEnvelope
    connect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
  }

  export type PlumUncheckedCreateNestedManyWithoutActionInput = {
    create?: XOR<PlumCreateWithoutActionInput, PlumUncheckedCreateWithoutActionInput> | PlumCreateWithoutActionInput[] | PlumUncheckedCreateWithoutActionInput[]
    connectOrCreate?: PlumCreateOrConnectWithoutActionInput | PlumCreateOrConnectWithoutActionInput[]
    createMany?: PlumCreateManyActionInputEnvelope
    connect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
  }

  export type ActionTemplateUpdateOneRequiredWithoutActionsNestedInput = {
    create?: XOR<ActionTemplateCreateWithoutActionsInput, ActionTemplateUncheckedCreateWithoutActionsInput>
    connectOrCreate?: ActionTemplateCreateOrConnectWithoutActionsInput
    upsert?: ActionTemplateUpsertWithoutActionsInput
    connect?: ActionTemplateWhereUniqueInput
    update?: XOR<XOR<ActionTemplateUpdateToOneWithWhereWithoutActionsInput, ActionTemplateUpdateWithoutActionsInput>, ActionTemplateUncheckedUpdateWithoutActionsInput>
  }

  export type PlumUpdateManyWithoutActionNestedInput = {
    create?: XOR<PlumCreateWithoutActionInput, PlumUncheckedCreateWithoutActionInput> | PlumCreateWithoutActionInput[] | PlumUncheckedCreateWithoutActionInput[]
    connectOrCreate?: PlumCreateOrConnectWithoutActionInput | PlumCreateOrConnectWithoutActionInput[]
    upsert?: PlumUpsertWithWhereUniqueWithoutActionInput | PlumUpsertWithWhereUniqueWithoutActionInput[]
    createMany?: PlumCreateManyActionInputEnvelope
    set?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    disconnect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    delete?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    connect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    update?: PlumUpdateWithWhereUniqueWithoutActionInput | PlumUpdateWithWhereUniqueWithoutActionInput[]
    updateMany?: PlumUpdateManyWithWhereWithoutActionInput | PlumUpdateManyWithWhereWithoutActionInput[]
    deleteMany?: PlumScalarWhereInput | PlumScalarWhereInput[]
  }

  export type PlumUncheckedUpdateManyWithoutActionNestedInput = {
    create?: XOR<PlumCreateWithoutActionInput, PlumUncheckedCreateWithoutActionInput> | PlumCreateWithoutActionInput[] | PlumUncheckedCreateWithoutActionInput[]
    connectOrCreate?: PlumCreateOrConnectWithoutActionInput | PlumCreateOrConnectWithoutActionInput[]
    upsert?: PlumUpsertWithWhereUniqueWithoutActionInput | PlumUpsertWithWhereUniqueWithoutActionInput[]
    createMany?: PlumCreateManyActionInputEnvelope
    set?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    disconnect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    delete?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    connect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    update?: PlumUpdateWithWhereUniqueWithoutActionInput | PlumUpdateWithWhereUniqueWithoutActionInput[]
    updateMany?: PlumUpdateManyWithWhereWithoutActionInput | PlumUpdateManyWithWhereWithoutActionInput[]
    deleteMany?: PlumScalarWhereInput | PlumScalarWhereInput[]
  }

  export type TriggerCreateNestedManyWithoutTriggerTemplateInput = {
    create?: XOR<TriggerCreateWithoutTriggerTemplateInput, TriggerUncheckedCreateWithoutTriggerTemplateInput> | TriggerCreateWithoutTriggerTemplateInput[] | TriggerUncheckedCreateWithoutTriggerTemplateInput[]
    connectOrCreate?: TriggerCreateOrConnectWithoutTriggerTemplateInput | TriggerCreateOrConnectWithoutTriggerTemplateInput[]
    createMany?: TriggerCreateManyTriggerTemplateInputEnvelope
    connect?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
  }

  export type TriggerUncheckedCreateNestedManyWithoutTriggerTemplateInput = {
    create?: XOR<TriggerCreateWithoutTriggerTemplateInput, TriggerUncheckedCreateWithoutTriggerTemplateInput> | TriggerCreateWithoutTriggerTemplateInput[] | TriggerUncheckedCreateWithoutTriggerTemplateInput[]
    connectOrCreate?: TriggerCreateOrConnectWithoutTriggerTemplateInput | TriggerCreateOrConnectWithoutTriggerTemplateInput[]
    createMany?: TriggerCreateManyTriggerTemplateInputEnvelope
    connect?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
  }

  export type TriggerUpdateManyWithoutTriggerTemplateNestedInput = {
    create?: XOR<TriggerCreateWithoutTriggerTemplateInput, TriggerUncheckedCreateWithoutTriggerTemplateInput> | TriggerCreateWithoutTriggerTemplateInput[] | TriggerUncheckedCreateWithoutTriggerTemplateInput[]
    connectOrCreate?: TriggerCreateOrConnectWithoutTriggerTemplateInput | TriggerCreateOrConnectWithoutTriggerTemplateInput[]
    upsert?: TriggerUpsertWithWhereUniqueWithoutTriggerTemplateInput | TriggerUpsertWithWhereUniqueWithoutTriggerTemplateInput[]
    createMany?: TriggerCreateManyTriggerTemplateInputEnvelope
    set?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
    disconnect?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
    delete?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
    connect?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
    update?: TriggerUpdateWithWhereUniqueWithoutTriggerTemplateInput | TriggerUpdateWithWhereUniqueWithoutTriggerTemplateInput[]
    updateMany?: TriggerUpdateManyWithWhereWithoutTriggerTemplateInput | TriggerUpdateManyWithWhereWithoutTriggerTemplateInput[]
    deleteMany?: TriggerScalarWhereInput | TriggerScalarWhereInput[]
  }

  export type TriggerUncheckedUpdateManyWithoutTriggerTemplateNestedInput = {
    create?: XOR<TriggerCreateWithoutTriggerTemplateInput, TriggerUncheckedCreateWithoutTriggerTemplateInput> | TriggerCreateWithoutTriggerTemplateInput[] | TriggerUncheckedCreateWithoutTriggerTemplateInput[]
    connectOrCreate?: TriggerCreateOrConnectWithoutTriggerTemplateInput | TriggerCreateOrConnectWithoutTriggerTemplateInput[]
    upsert?: TriggerUpsertWithWhereUniqueWithoutTriggerTemplateInput | TriggerUpsertWithWhereUniqueWithoutTriggerTemplateInput[]
    createMany?: TriggerCreateManyTriggerTemplateInputEnvelope
    set?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
    disconnect?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
    delete?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
    connect?: TriggerWhereUniqueInput | TriggerWhereUniqueInput[]
    update?: TriggerUpdateWithWhereUniqueWithoutTriggerTemplateInput | TriggerUpdateWithWhereUniqueWithoutTriggerTemplateInput[]
    updateMany?: TriggerUpdateManyWithWhereWithoutTriggerTemplateInput | TriggerUpdateManyWithWhereWithoutTriggerTemplateInput[]
    deleteMany?: TriggerScalarWhereInput | TriggerScalarWhereInput[]
  }

  export type TriggerTemplateCreateNestedOneWithoutTriggersInput = {
    create?: XOR<TriggerTemplateCreateWithoutTriggersInput, TriggerTemplateUncheckedCreateWithoutTriggersInput>
    connectOrCreate?: TriggerTemplateCreateOrConnectWithoutTriggersInput
    connect?: TriggerTemplateWhereUniqueInput
  }

  export type PlumCreateNestedManyWithoutTriggerInput = {
    create?: XOR<PlumCreateWithoutTriggerInput, PlumUncheckedCreateWithoutTriggerInput> | PlumCreateWithoutTriggerInput[] | PlumUncheckedCreateWithoutTriggerInput[]
    connectOrCreate?: PlumCreateOrConnectWithoutTriggerInput | PlumCreateOrConnectWithoutTriggerInput[]
    createMany?: PlumCreateManyTriggerInputEnvelope
    connect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
  }

  export type PlumUncheckedCreateNestedManyWithoutTriggerInput = {
    create?: XOR<PlumCreateWithoutTriggerInput, PlumUncheckedCreateWithoutTriggerInput> | PlumCreateWithoutTriggerInput[] | PlumUncheckedCreateWithoutTriggerInput[]
    connectOrCreate?: PlumCreateOrConnectWithoutTriggerInput | PlumCreateOrConnectWithoutTriggerInput[]
    createMany?: PlumCreateManyTriggerInputEnvelope
    connect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
  }

  export type TriggerTemplateUpdateOneRequiredWithoutTriggersNestedInput = {
    create?: XOR<TriggerTemplateCreateWithoutTriggersInput, TriggerTemplateUncheckedCreateWithoutTriggersInput>
    connectOrCreate?: TriggerTemplateCreateOrConnectWithoutTriggersInput
    upsert?: TriggerTemplateUpsertWithoutTriggersInput
    connect?: TriggerTemplateWhereUniqueInput
    update?: XOR<XOR<TriggerTemplateUpdateToOneWithWhereWithoutTriggersInput, TriggerTemplateUpdateWithoutTriggersInput>, TriggerTemplateUncheckedUpdateWithoutTriggersInput>
  }

  export type PlumUpdateManyWithoutTriggerNestedInput = {
    create?: XOR<PlumCreateWithoutTriggerInput, PlumUncheckedCreateWithoutTriggerInput> | PlumCreateWithoutTriggerInput[] | PlumUncheckedCreateWithoutTriggerInput[]
    connectOrCreate?: PlumCreateOrConnectWithoutTriggerInput | PlumCreateOrConnectWithoutTriggerInput[]
    upsert?: PlumUpsertWithWhereUniqueWithoutTriggerInput | PlumUpsertWithWhereUniqueWithoutTriggerInput[]
    createMany?: PlumCreateManyTriggerInputEnvelope
    set?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    disconnect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    delete?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    connect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    update?: PlumUpdateWithWhereUniqueWithoutTriggerInput | PlumUpdateWithWhereUniqueWithoutTriggerInput[]
    updateMany?: PlumUpdateManyWithWhereWithoutTriggerInput | PlumUpdateManyWithWhereWithoutTriggerInput[]
    deleteMany?: PlumScalarWhereInput | PlumScalarWhereInput[]
  }

  export type PlumUncheckedUpdateManyWithoutTriggerNestedInput = {
    create?: XOR<PlumCreateWithoutTriggerInput, PlumUncheckedCreateWithoutTriggerInput> | PlumCreateWithoutTriggerInput[] | PlumUncheckedCreateWithoutTriggerInput[]
    connectOrCreate?: PlumCreateOrConnectWithoutTriggerInput | PlumCreateOrConnectWithoutTriggerInput[]
    upsert?: PlumUpsertWithWhereUniqueWithoutTriggerInput | PlumUpsertWithWhereUniqueWithoutTriggerInput[]
    createMany?: PlumCreateManyTriggerInputEnvelope
    set?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    disconnect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    delete?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    connect?: PlumWhereUniqueInput | PlumWhereUniqueInput[]
    update?: PlumUpdateWithWhereUniqueWithoutTriggerInput | PlumUpdateWithWhereUniqueWithoutTriggerInput[]
    updateMany?: PlumUpdateManyWithWhereWithoutTriggerInput | PlumUpdateManyWithWhereWithoutTriggerInput[]
    deleteMany?: PlumScalarWhereInput | PlumScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type TokenCreateWithoutUserInput = {
    provider: string
    tokenHashed: string
    scope: number
    creationDate: string
  }

  export type TokenUncheckedCreateWithoutUserInput = {
    id?: number
    provider: string
    tokenHashed: string
    scope: number
    creationDate: string
  }

  export type TokenCreateOrConnectWithoutUserInput = {
    where: TokenWhereUniqueInput
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
  }

  export type TokenCreateManyUserInputEnvelope = {
    data: TokenCreateManyUserInput | TokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PlumCreateWithoutUserInput = {
    action: ActionCreateNestedOneWithoutPlumsInput
    trigger: TriggerCreateNestedOneWithoutPlumsInput
  }

  export type PlumUncheckedCreateWithoutUserInput = {
    id?: number
    actionId: number
    triggerId: number
  }

  export type PlumCreateOrConnectWithoutUserInput = {
    where: PlumWhereUniqueInput
    create: XOR<PlumCreateWithoutUserInput, PlumUncheckedCreateWithoutUserInput>
  }

  export type PlumCreateManyUserInputEnvelope = {
    data: PlumCreateManyUserInput | PlumCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TokenUpsertWithWhereUniqueWithoutUserInput = {
    where: TokenWhereUniqueInput
    update: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
  }

  export type TokenUpdateWithWhereUniqueWithoutUserInput = {
    where: TokenWhereUniqueInput
    data: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
  }

  export type TokenUpdateManyWithWhereWithoutUserInput = {
    where: TokenScalarWhereInput
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyWithoutUserInput>
  }

  export type TokenScalarWhereInput = {
    AND?: TokenScalarWhereInput | TokenScalarWhereInput[]
    OR?: TokenScalarWhereInput[]
    NOT?: TokenScalarWhereInput | TokenScalarWhereInput[]
    id?: IntFilter<"Token"> | number
    userId?: IntFilter<"Token"> | number
    provider?: StringFilter<"Token"> | string
    tokenHashed?: StringFilter<"Token"> | string
    scope?: IntFilter<"Token"> | number
    creationDate?: StringFilter<"Token"> | string
  }

  export type PlumUpsertWithWhereUniqueWithoutUserInput = {
    where: PlumWhereUniqueInput
    update: XOR<PlumUpdateWithoutUserInput, PlumUncheckedUpdateWithoutUserInput>
    create: XOR<PlumCreateWithoutUserInput, PlumUncheckedCreateWithoutUserInput>
  }

  export type PlumUpdateWithWhereUniqueWithoutUserInput = {
    where: PlumWhereUniqueInput
    data: XOR<PlumUpdateWithoutUserInput, PlumUncheckedUpdateWithoutUserInput>
  }

  export type PlumUpdateManyWithWhereWithoutUserInput = {
    where: PlumScalarWhereInput
    data: XOR<PlumUpdateManyMutationInput, PlumUncheckedUpdateManyWithoutUserInput>
  }

  export type PlumScalarWhereInput = {
    AND?: PlumScalarWhereInput | PlumScalarWhereInput[]
    OR?: PlumScalarWhereInput[]
    NOT?: PlumScalarWhereInput | PlumScalarWhereInput[]
    id?: IntFilter<"Plum"> | number
    userId?: IntFilter<"Plum"> | number
    actionId?: IntFilter<"Plum"> | number
    triggerId?: IntFilter<"Plum"> | number
  }

  export type UserCreateWithoutTokensInput = {
    username: string
    hashedPassword: string
    mail: string
    plums?: PlumCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTokensInput = {
    userId?: number
    username: string
    hashedPassword: string
    mail: string
    plums?: PlumUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
  }

  export type UserUpsertWithoutTokensInput = {
    update: XOR<UserUpdateWithoutTokensInput, UserUncheckedUpdateWithoutTokensInput>
    create: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTokensInput, UserUncheckedUpdateWithoutTokensInput>
  }

  export type UserUpdateWithoutTokensInput = {
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    plums?: PlumUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTokensInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    plums?: PlumUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPlumsInput = {
    username: string
    hashedPassword: string
    mail: string
    tokens?: TokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPlumsInput = {
    userId?: number
    username: string
    hashedPassword: string
    mail: string
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPlumsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlumsInput, UserUncheckedCreateWithoutPlumsInput>
  }

  export type ActionCreateWithoutPlumsInput = {
    actionValue: JsonNullValueInput | InputJsonValue
    actionTemplate: ActionTemplateCreateNestedOneWithoutActionsInput
  }

  export type ActionUncheckedCreateWithoutPlumsInput = {
    id?: number
    actionValue: JsonNullValueInput | InputJsonValue
    actionTemplateId: number
  }

  export type ActionCreateOrConnectWithoutPlumsInput = {
    where: ActionWhereUniqueInput
    create: XOR<ActionCreateWithoutPlumsInput, ActionUncheckedCreateWithoutPlumsInput>
  }

  export type TriggerCreateWithoutPlumsInput = {
    triggerValue: JsonNullValueInput | InputJsonValue
    triggerTemplate: TriggerTemplateCreateNestedOneWithoutTriggersInput
  }

  export type TriggerUncheckedCreateWithoutPlumsInput = {
    id?: number
    triggerValue: JsonNullValueInput | InputJsonValue
    triggerTemplateId: number
  }

  export type TriggerCreateOrConnectWithoutPlumsInput = {
    where: TriggerWhereUniqueInput
    create: XOR<TriggerCreateWithoutPlumsInput, TriggerUncheckedCreateWithoutPlumsInput>
  }

  export type UserUpsertWithoutPlumsInput = {
    update: XOR<UserUpdateWithoutPlumsInput, UserUncheckedUpdateWithoutPlumsInput>
    create: XOR<UserCreateWithoutPlumsInput, UserUncheckedCreateWithoutPlumsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlumsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlumsInput, UserUncheckedUpdateWithoutPlumsInput>
  }

  export type UserUpdateWithoutPlumsInput = {
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    tokens?: TokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPlumsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ActionUpsertWithoutPlumsInput = {
    update: XOR<ActionUpdateWithoutPlumsInput, ActionUncheckedUpdateWithoutPlumsInput>
    create: XOR<ActionCreateWithoutPlumsInput, ActionUncheckedCreateWithoutPlumsInput>
    where?: ActionWhereInput
  }

  export type ActionUpdateToOneWithWhereWithoutPlumsInput = {
    where?: ActionWhereInput
    data: XOR<ActionUpdateWithoutPlumsInput, ActionUncheckedUpdateWithoutPlumsInput>
  }

  export type ActionUpdateWithoutPlumsInput = {
    actionValue?: JsonNullValueInput | InputJsonValue
    actionTemplate?: ActionTemplateUpdateOneRequiredWithoutActionsNestedInput
  }

  export type ActionUncheckedUpdateWithoutPlumsInput = {
    id?: IntFieldUpdateOperationsInput | number
    actionValue?: JsonNullValueInput | InputJsonValue
    actionTemplateId?: IntFieldUpdateOperationsInput | number
  }

  export type TriggerUpsertWithoutPlumsInput = {
    update: XOR<TriggerUpdateWithoutPlumsInput, TriggerUncheckedUpdateWithoutPlumsInput>
    create: XOR<TriggerCreateWithoutPlumsInput, TriggerUncheckedCreateWithoutPlumsInput>
    where?: TriggerWhereInput
  }

  export type TriggerUpdateToOneWithWhereWithoutPlumsInput = {
    where?: TriggerWhereInput
    data: XOR<TriggerUpdateWithoutPlumsInput, TriggerUncheckedUpdateWithoutPlumsInput>
  }

  export type TriggerUpdateWithoutPlumsInput = {
    triggerValue?: JsonNullValueInput | InputJsonValue
    triggerTemplate?: TriggerTemplateUpdateOneRequiredWithoutTriggersNestedInput
  }

  export type TriggerUncheckedUpdateWithoutPlumsInput = {
    id?: IntFieldUpdateOperationsInput | number
    triggerValue?: JsonNullValueInput | InputJsonValue
    triggerTemplateId?: IntFieldUpdateOperationsInput | number
  }

  export type ActionCreateWithoutActionTemplateInput = {
    actionValue: JsonNullValueInput | InputJsonValue
    plums?: PlumCreateNestedManyWithoutActionInput
  }

  export type ActionUncheckedCreateWithoutActionTemplateInput = {
    id?: number
    actionValue: JsonNullValueInput | InputJsonValue
    plums?: PlumUncheckedCreateNestedManyWithoutActionInput
  }

  export type ActionCreateOrConnectWithoutActionTemplateInput = {
    where: ActionWhereUniqueInput
    create: XOR<ActionCreateWithoutActionTemplateInput, ActionUncheckedCreateWithoutActionTemplateInput>
  }

  export type ActionCreateManyActionTemplateInputEnvelope = {
    data: ActionCreateManyActionTemplateInput | ActionCreateManyActionTemplateInput[]
    skipDuplicates?: boolean
  }

  export type ActionUpsertWithWhereUniqueWithoutActionTemplateInput = {
    where: ActionWhereUniqueInput
    update: XOR<ActionUpdateWithoutActionTemplateInput, ActionUncheckedUpdateWithoutActionTemplateInput>
    create: XOR<ActionCreateWithoutActionTemplateInput, ActionUncheckedCreateWithoutActionTemplateInput>
  }

  export type ActionUpdateWithWhereUniqueWithoutActionTemplateInput = {
    where: ActionWhereUniqueInput
    data: XOR<ActionUpdateWithoutActionTemplateInput, ActionUncheckedUpdateWithoutActionTemplateInput>
  }

  export type ActionUpdateManyWithWhereWithoutActionTemplateInput = {
    where: ActionScalarWhereInput
    data: XOR<ActionUpdateManyMutationInput, ActionUncheckedUpdateManyWithoutActionTemplateInput>
  }

  export type ActionScalarWhereInput = {
    AND?: ActionScalarWhereInput | ActionScalarWhereInput[]
    OR?: ActionScalarWhereInput[]
    NOT?: ActionScalarWhereInput | ActionScalarWhereInput[]
    id?: IntFilter<"Action"> | number
    actionValue?: JsonFilter<"Action">
    actionTemplateId?: IntFilter<"Action"> | number
  }

  export type ActionTemplateCreateWithoutActionsInput = {
    name: string
    actFunc: string
    valueTemplate: JsonNullValueInput | InputJsonValue
  }

  export type ActionTemplateUncheckedCreateWithoutActionsInput = {
    id?: number
    name: string
    actFunc: string
    valueTemplate: JsonNullValueInput | InputJsonValue
  }

  export type ActionTemplateCreateOrConnectWithoutActionsInput = {
    where: ActionTemplateWhereUniqueInput
    create: XOR<ActionTemplateCreateWithoutActionsInput, ActionTemplateUncheckedCreateWithoutActionsInput>
  }

  export type PlumCreateWithoutActionInput = {
    user: UserCreateNestedOneWithoutPlumsInput
    trigger: TriggerCreateNestedOneWithoutPlumsInput
  }

  export type PlumUncheckedCreateWithoutActionInput = {
    id?: number
    userId: number
    triggerId: number
  }

  export type PlumCreateOrConnectWithoutActionInput = {
    where: PlumWhereUniqueInput
    create: XOR<PlumCreateWithoutActionInput, PlumUncheckedCreateWithoutActionInput>
  }

  export type PlumCreateManyActionInputEnvelope = {
    data: PlumCreateManyActionInput | PlumCreateManyActionInput[]
    skipDuplicates?: boolean
  }

  export type ActionTemplateUpsertWithoutActionsInput = {
    update: XOR<ActionTemplateUpdateWithoutActionsInput, ActionTemplateUncheckedUpdateWithoutActionsInput>
    create: XOR<ActionTemplateCreateWithoutActionsInput, ActionTemplateUncheckedCreateWithoutActionsInput>
    where?: ActionTemplateWhereInput
  }

  export type ActionTemplateUpdateToOneWithWhereWithoutActionsInput = {
    where?: ActionTemplateWhereInput
    data: XOR<ActionTemplateUpdateWithoutActionsInput, ActionTemplateUncheckedUpdateWithoutActionsInput>
  }

  export type ActionTemplateUpdateWithoutActionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    actFunc?: StringFieldUpdateOperationsInput | string
    valueTemplate?: JsonNullValueInput | InputJsonValue
  }

  export type ActionTemplateUncheckedUpdateWithoutActionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    actFunc?: StringFieldUpdateOperationsInput | string
    valueTemplate?: JsonNullValueInput | InputJsonValue
  }

  export type PlumUpsertWithWhereUniqueWithoutActionInput = {
    where: PlumWhereUniqueInput
    update: XOR<PlumUpdateWithoutActionInput, PlumUncheckedUpdateWithoutActionInput>
    create: XOR<PlumCreateWithoutActionInput, PlumUncheckedCreateWithoutActionInput>
  }

  export type PlumUpdateWithWhereUniqueWithoutActionInput = {
    where: PlumWhereUniqueInput
    data: XOR<PlumUpdateWithoutActionInput, PlumUncheckedUpdateWithoutActionInput>
  }

  export type PlumUpdateManyWithWhereWithoutActionInput = {
    where: PlumScalarWhereInput
    data: XOR<PlumUpdateManyMutationInput, PlumUncheckedUpdateManyWithoutActionInput>
  }

  export type TriggerCreateWithoutTriggerTemplateInput = {
    triggerValue: JsonNullValueInput | InputJsonValue
    plums?: PlumCreateNestedManyWithoutTriggerInput
  }

  export type TriggerUncheckedCreateWithoutTriggerTemplateInput = {
    id?: number
    triggerValue: JsonNullValueInput | InputJsonValue
    plums?: PlumUncheckedCreateNestedManyWithoutTriggerInput
  }

  export type TriggerCreateOrConnectWithoutTriggerTemplateInput = {
    where: TriggerWhereUniqueInput
    create: XOR<TriggerCreateWithoutTriggerTemplateInput, TriggerUncheckedCreateWithoutTriggerTemplateInput>
  }

  export type TriggerCreateManyTriggerTemplateInputEnvelope = {
    data: TriggerCreateManyTriggerTemplateInput | TriggerCreateManyTriggerTemplateInput[]
    skipDuplicates?: boolean
  }

  export type TriggerUpsertWithWhereUniqueWithoutTriggerTemplateInput = {
    where: TriggerWhereUniqueInput
    update: XOR<TriggerUpdateWithoutTriggerTemplateInput, TriggerUncheckedUpdateWithoutTriggerTemplateInput>
    create: XOR<TriggerCreateWithoutTriggerTemplateInput, TriggerUncheckedCreateWithoutTriggerTemplateInput>
  }

  export type TriggerUpdateWithWhereUniqueWithoutTriggerTemplateInput = {
    where: TriggerWhereUniqueInput
    data: XOR<TriggerUpdateWithoutTriggerTemplateInput, TriggerUncheckedUpdateWithoutTriggerTemplateInput>
  }

  export type TriggerUpdateManyWithWhereWithoutTriggerTemplateInput = {
    where: TriggerScalarWhereInput
    data: XOR<TriggerUpdateManyMutationInput, TriggerUncheckedUpdateManyWithoutTriggerTemplateInput>
  }

  export type TriggerScalarWhereInput = {
    AND?: TriggerScalarWhereInput | TriggerScalarWhereInput[]
    OR?: TriggerScalarWhereInput[]
    NOT?: TriggerScalarWhereInput | TriggerScalarWhereInput[]
    id?: IntFilter<"Trigger"> | number
    triggerValue?: JsonFilter<"Trigger">
    triggerTemplateId?: IntFilter<"Trigger"> | number
  }

  export type TriggerTemplateCreateWithoutTriggersInput = {
    name: string
    provider: string
    type: string
    trigFunc: string
    valueTemplate: JsonNullValueInput | InputJsonValue
  }

  export type TriggerTemplateUncheckedCreateWithoutTriggersInput = {
    id?: number
    name: string
    provider: string
    type: string
    trigFunc: string
    valueTemplate: JsonNullValueInput | InputJsonValue
  }

  export type TriggerTemplateCreateOrConnectWithoutTriggersInput = {
    where: TriggerTemplateWhereUniqueInput
    create: XOR<TriggerTemplateCreateWithoutTriggersInput, TriggerTemplateUncheckedCreateWithoutTriggersInput>
  }

  export type PlumCreateWithoutTriggerInput = {
    user: UserCreateNestedOneWithoutPlumsInput
    action: ActionCreateNestedOneWithoutPlumsInput
  }

  export type PlumUncheckedCreateWithoutTriggerInput = {
    id?: number
    userId: number
    actionId: number
  }

  export type PlumCreateOrConnectWithoutTriggerInput = {
    where: PlumWhereUniqueInput
    create: XOR<PlumCreateWithoutTriggerInput, PlumUncheckedCreateWithoutTriggerInput>
  }

  export type PlumCreateManyTriggerInputEnvelope = {
    data: PlumCreateManyTriggerInput | PlumCreateManyTriggerInput[]
    skipDuplicates?: boolean
  }

  export type TriggerTemplateUpsertWithoutTriggersInput = {
    update: XOR<TriggerTemplateUpdateWithoutTriggersInput, TriggerTemplateUncheckedUpdateWithoutTriggersInput>
    create: XOR<TriggerTemplateCreateWithoutTriggersInput, TriggerTemplateUncheckedCreateWithoutTriggersInput>
    where?: TriggerTemplateWhereInput
  }

  export type TriggerTemplateUpdateToOneWithWhereWithoutTriggersInput = {
    where?: TriggerTemplateWhereInput
    data: XOR<TriggerTemplateUpdateWithoutTriggersInput, TriggerTemplateUncheckedUpdateWithoutTriggersInput>
  }

  export type TriggerTemplateUpdateWithoutTriggersInput = {
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    trigFunc?: StringFieldUpdateOperationsInput | string
    valueTemplate?: JsonNullValueInput | InputJsonValue
  }

  export type TriggerTemplateUncheckedUpdateWithoutTriggersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    trigFunc?: StringFieldUpdateOperationsInput | string
    valueTemplate?: JsonNullValueInput | InputJsonValue
  }

  export type PlumUpsertWithWhereUniqueWithoutTriggerInput = {
    where: PlumWhereUniqueInput
    update: XOR<PlumUpdateWithoutTriggerInput, PlumUncheckedUpdateWithoutTriggerInput>
    create: XOR<PlumCreateWithoutTriggerInput, PlumUncheckedCreateWithoutTriggerInput>
  }

  export type PlumUpdateWithWhereUniqueWithoutTriggerInput = {
    where: PlumWhereUniqueInput
    data: XOR<PlumUpdateWithoutTriggerInput, PlumUncheckedUpdateWithoutTriggerInput>
  }

  export type PlumUpdateManyWithWhereWithoutTriggerInput = {
    where: PlumScalarWhereInput
    data: XOR<PlumUpdateManyMutationInput, PlumUncheckedUpdateManyWithoutTriggerInput>
  }

  export type TokenCreateManyUserInput = {
    id?: number
    provider: string
    tokenHashed: string
    scope: number
    creationDate: string
  }

  export type PlumCreateManyUserInput = {
    id?: number
    actionId: number
    triggerId: number
  }

  export type TokenUpdateWithoutUserInput = {
    provider?: StringFieldUpdateOperationsInput | string
    tokenHashed?: StringFieldUpdateOperationsInput | string
    scope?: IntFieldUpdateOperationsInput | number
    creationDate?: StringFieldUpdateOperationsInput | string
  }

  export type TokenUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    provider?: StringFieldUpdateOperationsInput | string
    tokenHashed?: StringFieldUpdateOperationsInput | string
    scope?: IntFieldUpdateOperationsInput | number
    creationDate?: StringFieldUpdateOperationsInput | string
  }

  export type TokenUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    provider?: StringFieldUpdateOperationsInput | string
    tokenHashed?: StringFieldUpdateOperationsInput | string
    scope?: IntFieldUpdateOperationsInput | number
    creationDate?: StringFieldUpdateOperationsInput | string
  }

  export type PlumUpdateWithoutUserInput = {
    action?: ActionUpdateOneRequiredWithoutPlumsNestedInput
    trigger?: TriggerUpdateOneRequiredWithoutPlumsNestedInput
  }

  export type PlumUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    actionId?: IntFieldUpdateOperationsInput | number
    triggerId?: IntFieldUpdateOperationsInput | number
  }

  export type PlumUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    actionId?: IntFieldUpdateOperationsInput | number
    triggerId?: IntFieldUpdateOperationsInput | number
  }

  export type ActionCreateManyActionTemplateInput = {
    id?: number
    actionValue: JsonNullValueInput | InputJsonValue
  }

  export type ActionUpdateWithoutActionTemplateInput = {
    actionValue?: JsonNullValueInput | InputJsonValue
    plums?: PlumUpdateManyWithoutActionNestedInput
  }

  export type ActionUncheckedUpdateWithoutActionTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    actionValue?: JsonNullValueInput | InputJsonValue
    plums?: PlumUncheckedUpdateManyWithoutActionNestedInput
  }

  export type ActionUncheckedUpdateManyWithoutActionTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    actionValue?: JsonNullValueInput | InputJsonValue
  }

  export type PlumCreateManyActionInput = {
    id?: number
    userId: number
    triggerId: number
  }

  export type PlumUpdateWithoutActionInput = {
    user?: UserUpdateOneRequiredWithoutPlumsNestedInput
    trigger?: TriggerUpdateOneRequiredWithoutPlumsNestedInput
  }

  export type PlumUncheckedUpdateWithoutActionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    triggerId?: IntFieldUpdateOperationsInput | number
  }

  export type PlumUncheckedUpdateManyWithoutActionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    triggerId?: IntFieldUpdateOperationsInput | number
  }

  export type TriggerCreateManyTriggerTemplateInput = {
    id?: number
    triggerValue: JsonNullValueInput | InputJsonValue
  }

  export type TriggerUpdateWithoutTriggerTemplateInput = {
    triggerValue?: JsonNullValueInput | InputJsonValue
    plums?: PlumUpdateManyWithoutTriggerNestedInput
  }

  export type TriggerUncheckedUpdateWithoutTriggerTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    triggerValue?: JsonNullValueInput | InputJsonValue
    plums?: PlumUncheckedUpdateManyWithoutTriggerNestedInput
  }

  export type TriggerUncheckedUpdateManyWithoutTriggerTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    triggerValue?: JsonNullValueInput | InputJsonValue
  }

  export type PlumCreateManyTriggerInput = {
    id?: number
    userId: number
    actionId: number
  }

  export type PlumUpdateWithoutTriggerInput = {
    user?: UserUpdateOneRequiredWithoutPlumsNestedInput
    action?: ActionUpdateOneRequiredWithoutPlumsNestedInput
  }

  export type PlumUncheckedUpdateWithoutTriggerInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    actionId?: IntFieldUpdateOperationsInput | number
  }

  export type PlumUncheckedUpdateManyWithoutTriggerInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    actionId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}